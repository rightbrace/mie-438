
fIrmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc0  08006dc0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  08006dc0  08006dc0  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dc0  08006dc0  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08006dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200d0  2**0
                  CONTENTS
 10 .bss          000004ac  200000d0  200000d0  000200d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000057c  2000057c  000200d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011233  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002449  00000000  00000000  00031376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ed0  00000000  00000000  000337c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ba8  00000000  00000000  00034690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c50e  00000000  00000000  00035238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00012c3a  00000000  00000000  00051746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ac253  00000000  00000000  00064380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004384  00000000  00000000  001105d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00114958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cc8 	.word	0x08006cc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08006cc8 	.word	0x08006cc8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <CalculateDistance>:
};

#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) > (b) ? (a) : (b))

uint32_t CalculateDistance(Reading a, Reading b) {
 8000280:	b490      	push	{r4, r7}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	463c      	mov	r4, r7
 8000288:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// You would think this would be an issue with unsigned values, but it just works (tm)
	return (a.red - b.red) * (a.red - b.red) + (a.green - b.green) * (a.green - b.green) + (a.blue - b.blue) * (a.blue - b.blue);
 800028c:	683a      	ldr	r2, [r7, #0]
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	6839      	ldr	r1, [r7, #0]
 8000294:	69ba      	ldr	r2, [r7, #24]
 8000296:	1a8a      	subs	r2, r1, r2
 8000298:	fb03 f202 	mul.w	r2, r3, r2
 800029c:	6879      	ldr	r1, [r7, #4]
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	1acb      	subs	r3, r1, r3
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	69f9      	ldr	r1, [r7, #28]
 80002a6:	1a41      	subs	r1, r0, r1
 80002a8:	fb01 f303 	mul.w	r3, r1, r3
 80002ac:	441a      	add	r2, r3
 80002ae:	68b9      	ldr	r1, [r7, #8]
 80002b0:	6a3b      	ldr	r3, [r7, #32]
 80002b2:	1acb      	subs	r3, r1, r3
 80002b4:	68b8      	ldr	r0, [r7, #8]
 80002b6:	6a39      	ldr	r1, [r7, #32]
 80002b8:	1a41      	subs	r1, r0, r1
 80002ba:	fb01 f303 	mul.w	r3, r1, r3
 80002be:	4413      	add	r3, r2
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3710      	adds	r7, #16
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc90      	pop	{r4, r7}
 80002c8:	4770      	bx	lr

080002ca <SetColor>:

void SetColor(bool red, bool green, bool blue) {
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	4603      	mov	r3, r0
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	460b      	mov	r3, r1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	4613      	mov	r3, r2
 80002da:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, !blue);
 80002dc:	797b      	ldrb	r3, [r7, #5]
 80002de:	f083 0301 	eor.w	r3, r3, #1
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	461a      	mov	r2, r3
 80002e6:	2102      	movs	r1, #2
 80002e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ec:	f002 faa2 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, !red);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	f083 0301 	eor.w	r3, r3, #1
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	461a      	mov	r2, r3
 80002fa:	2108      	movs	r1, #8
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000300:	f002 fa98 	bl	8002834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, !green);
 8000304:	79bb      	ldrb	r3, [r7, #6]
 8000306:	f083 0301 	eor.w	r3, r3, #1
 800030a:	b2db      	uxtb	r3, r3
 800030c:	461a      	mov	r2, r3
 800030e:	2110      	movs	r1, #16
 8000310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000314:	f002 fa8e 	bl	8002834 <HAL_GPIO_WritePin>

}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <ReadAnalog>:

uint32_t ReadAnalog() {
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
	uint32_t result = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
	HAL_ADC_Start(&hadc1);
 800032a:	480b      	ldr	r0, [pc, #44]	; (8000358 <ReadAnalog+0x38>)
 800032c:	f001 f8bc 	bl	80014a8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8000330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000334:	4808      	ldr	r0, [pc, #32]	; (8000358 <ReadAnalog+0x38>)
 8000336:	f001 f9a3 	bl	8001680 <HAL_ADC_PollForConversion>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d103      	bne.n	8000348 <ReadAnalog+0x28>
		result = HAL_ADC_GetValue(&hadc1);
 8000340:	4805      	ldr	r0, [pc, #20]	; (8000358 <ReadAnalog+0x38>)
 8000342:	f001 fa6b 	bl	800181c <HAL_ADC_GetValue>
 8000346:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 8000348:	4803      	ldr	r0, [pc, #12]	; (8000358 <ReadAnalog+0x38>)
 800034a:	f001 f963 	bl	8001614 <HAL_ADC_Stop>

	return result;
 800034e:	687b      	ldr	r3, [r7, #4]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3708      	adds	r7, #8
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	200000ec 	.word	0x200000ec

0800035c <CaptureReading>:

void CaptureReading(Reading* result) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]

	const int CHARGE_DELAY = 150;
 8000364:	2396      	movs	r3, #150	; 0x96
 8000366:	60fb      	str	r3, [r7, #12]
	const int DISCHARGE_DELAY = 150;
 8000368:	2396      	movs	r3, #150	; 0x96
 800036a:	60bb      	str	r3, [r7, #8]

	SetColor(1, 0, 0);
 800036c:	2200      	movs	r2, #0
 800036e:	2100      	movs	r1, #0
 8000370:	2001      	movs	r0, #1
 8000372:	f7ff ffaa 	bl	80002ca <SetColor>
	HAL_Delay(CHARGE_DELAY);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	4618      	mov	r0, r3
 800037a:	f000 fedf 	bl	800113c <HAL_Delay>
	result->red = ReadAnalog();
 800037e:	f7ff ffcf 	bl	8000320 <ReadAnalog>
 8000382:	4602      	mov	r2, r0
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	601a      	str	r2, [r3, #0]
	SetColor(0, 0, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ff9c 	bl	80002ca <SetColor>
	HAL_Delay(DISCHARGE_DELAY);
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fed1 	bl	800113c <HAL_Delay>

	SetColor(0, 1, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	2101      	movs	r1, #1
 800039e:	2000      	movs	r0, #0
 80003a0:	f7ff ff93 	bl	80002ca <SetColor>
	HAL_Delay(CHARGE_DELAY);
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fec8 	bl	800113c <HAL_Delay>
	result->green = ReadAnalog();
 80003ac:	f7ff ffb8 	bl	8000320 <ReadAnalog>
 80003b0:	4602      	mov	r2, r0
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	605a      	str	r2, [r3, #4]
	SetColor(0, 0, 0);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2100      	movs	r1, #0
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff ff85 	bl	80002ca <SetColor>
	HAL_Delay(DISCHARGE_DELAY);
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	4618      	mov	r0, r3
 80003c4:	f000 feba 	bl	800113c <HAL_Delay>

	SetColor(0, 0, 1);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2100      	movs	r1, #0
 80003cc:	2000      	movs	r0, #0
 80003ce:	f7ff ff7c 	bl	80002ca <SetColor>
	HAL_Delay(CHARGE_DELAY);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 feb1 	bl	800113c <HAL_Delay>
	result->blue = ReadAnalog();
 80003da:	f7ff ffa1 	bl	8000320 <ReadAnalog>
 80003de:	4602      	mov	r2, r0
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	609a      	str	r2, [r3, #8]
	SetColor(0, 0, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2100      	movs	r1, #0
 80003e8:	2000      	movs	r0, #0
 80003ea:	f7ff ff6e 	bl	80002ca <SetColor>

}
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <SetServoAngle>:

void SetServoAngle(unsigned long channel, uint32_t pulseMicros) {
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	//
	// Channel is one of three values, each corresponding to a pin:
	// TIM_CHANNEL_1 = PA_6 = A5
	// TIM_CHANNEL_2 = PB_5 = D11 AND D5???
	// TIM_CHANNEL_3 = PB_0 = D3
	__HAL_TIM_SET_COMPARE(&htim3, channel, pulseMicros);
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d104      	bne.n	8000412 <SetServoAngle+0x1a>
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <SetServoAngle+0x70>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000410:	e023      	b.n	800045a <SetServoAngle+0x62>
	__HAL_TIM_SET_COMPARE(&htim3, channel, pulseMicros);
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b04      	cmp	r3, #4
 8000416:	d104      	bne.n	8000422 <SetServoAngle+0x2a>
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <SetServoAngle+0x70>)
 800041a:	681a      	ldr	r2, [r3, #0]
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000420:	e01b      	b.n	800045a <SetServoAngle+0x62>
	__HAL_TIM_SET_COMPARE(&htim3, channel, pulseMicros);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b08      	cmp	r3, #8
 8000426:	d104      	bne.n	8000432 <SetServoAngle+0x3a>
 8000428:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <SetServoAngle+0x70>)
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000430:	e013      	b.n	800045a <SetServoAngle+0x62>
	__HAL_TIM_SET_COMPARE(&htim3, channel, pulseMicros);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	2b0c      	cmp	r3, #12
 8000436:	d104      	bne.n	8000442 <SetServoAngle+0x4a>
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <SetServoAngle+0x70>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000440:	e00b      	b.n	800045a <SetServoAngle+0x62>
	__HAL_TIM_SET_COMPARE(&htim3, channel, pulseMicros);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	2b10      	cmp	r3, #16
 8000446:	d104      	bne.n	8000452 <SetServoAngle+0x5a>
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <SetServoAngle+0x70>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000450:	e003      	b.n	800045a <SetServoAngle+0x62>
	__HAL_TIM_SET_COMPARE(&htim3, channel, pulseMicros);
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <SetServoAngle+0x70>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	2000013c 	.word	0x2000013c

0800046c <SetDistributorPosition>:
};

uint32_t DistributorSenseMicros = 900;
uint32_t DistributorDropMicros = 2100;

void SetDistributorPosition(int drop) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	SetServoAngle(TIM_CHANNEL_1, drop ? DistributorDropMicros : DistributorSenseMicros);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d002      	beq.n	8000480 <SetDistributorPosition+0x14>
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <SetDistributorPosition+0x28>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	e001      	b.n	8000484 <SetDistributorPosition+0x18>
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <SetDistributorPosition+0x2c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4619      	mov	r1, r3
 8000486:	2000      	movs	r0, #0
 8000488:	f7ff ffb6 	bl	80003f8 <SetServoAngle>
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000068 	.word	0x20000068
 8000498:	20000064 	.word	0x20000064

0800049c <SendChuteTo>:

void SendChuteTo(int destinationChute) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	SetServoAngle(TIM_CHANNEL_2, ChutePulseMicros[destinationChute]);
 80004a4:	4a05      	ldr	r2, [pc, #20]	; (80004bc <SendChuteTo+0x20>)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ac:	4619      	mov	r1, r3
 80004ae:	2004      	movs	r0, #4
 80004b0:	f7ff ffa2 	bl	80003f8 <SetServoAngle>
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	20000040 	.word	0x20000040

080004c0 <SetResetBar>:

uint32_t ResetBarClosedMicros = 900;
uint32_t ResetBarOpenMicros = 1500;

void SetResetBar(int open) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	SetServoAngle(TIM_CHANNEL_3, open ? ResetBarOpenMicros : ResetBarClosedMicros);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d002      	beq.n	80004d4 <SetResetBar+0x14>
 80004ce:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <SetResetBar+0x28>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	e001      	b.n	80004d8 <SetResetBar+0x18>
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <SetResetBar+0x2c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	2008      	movs	r0, #8
 80004dc:	f7ff ff8c 	bl	80003f8 <SetServoAngle>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000070 	.word	0x20000070
 80004ec:	2000006c 	.word	0x2000006c

080004f0 <uartAvailable>:
// Index of next byte to be written
unsigned char uartWriteIdx = 0;
// Whether the write pointer has passed the read pointer
unsigned char uartOverflow = 0;

unsigned char uartAvailable() {
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	return uartWriteIdx != uartReadIdx;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <uartAvailable+0x20>)
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <uartAvailable+0x24>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2db      	uxtb	r3, r3
}
 8000506:	4618      	mov	r0, r3
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	20000411 	.word	0x20000411
 8000514:	20000410 	.word	0x20000410

08000518 <uartRead>:

unsigned char uartRead() {
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
	return rxBuffer[uartReadIdx++];
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <uartRead+0x20>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	b2d1      	uxtb	r1, r2
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <uartRead+0x20>)
 8000526:	7011      	strb	r1, [r2, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <uartRead+0x24>)
 800052c:	5c9b      	ldrb	r3, [r3, r2]
}
 800052e:	4618      	mov	r0, r3
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	20000410 	.word	0x20000410
 800053c:	20000310 	.word	0x20000310

08000540 <GetPixelColor>:
}

unsigned char ImageData[16] = {0};
unsigned char ColumnHeights[8] = {0};

unsigned char GetPixelColor(unsigned char x, unsigned char y) {
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	460a      	mov	r2, r1
 800054a:	71fb      	strb	r3, [r7, #7]
 800054c:	4613      	mov	r3, r2
 800054e:	71bb      	strb	r3, [r7, #6]
	unsigned char idx = y * 2 + x / 4;
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	005b      	lsls	r3, r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	089b      	lsrs	r3, r3, #2
 800055a:	b2db      	uxtb	r3, r3
 800055c:	4413      	add	r3, r2
 800055e:	73fb      	strb	r3, [r7, #15]
	unsigned char color = 0b11 & (ImageData[idx] >> (6-(x%4)*2));
 8000560:	7bfb      	ldrb	r3, [r7, #15]
 8000562:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <GetPixelColor+0x54>)
 8000564:	5cd3      	ldrb	r3, [r2, r3]
 8000566:	461a      	mov	r2, r3
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	43db      	mvns	r3, r3
 800056c:	f003 0303 	and.w	r3, r3, #3
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	fa42 f303 	asr.w	r3, r2, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 0303 	and.w	r3, r3, #3
 800057c:	73bb      	strb	r3, [r7, #14]
	while (color > 3);
 800057e:	bf00      	nop
 8000580:	7bbb      	ldrb	r3, [r7, #14]
 8000582:	2b03      	cmp	r3, #3
 8000584:	d8fc      	bhi.n	8000580 <GetPixelColor+0x40>
	return color;
 8000586:	7bbb      	ldrb	r3, [r7, #14]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000414 	.word	0x20000414

08000598 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	uartWriteIdx ++; // Will wrap automatically
 80005a0:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <HAL_UART_RxCpltCallback+0x44>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <HAL_UART_RxCpltCallback+0x44>)
 80005aa:	701a      	strb	r2, [r3, #0]
	if (uartWriteIdx == uartReadIdx) uartOverflow = 1;
 80005ac:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <HAL_UART_RxCpltCallback+0x44>)
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <HAL_UART_RxCpltCallback+0x48>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d102      	bne.n	80005be <HAL_UART_RxCpltCallback+0x26>
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <HAL_UART_RxCpltCallback+0x4c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, &rxBuffer[uartWriteIdx], 1);
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <HAL_UART_RxCpltCallback+0x44>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <HAL_UART_RxCpltCallback+0x50>)
 80005c6:	4413      	add	r3, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <HAL_UART_RxCpltCallback+0x54>)
 80005ce:	f004 fd89 	bl	80050e4 <HAL_UART_Receive_IT>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000411 	.word	0x20000411
 80005e0:	20000410 	.word	0x20000410
 80005e4:	20000412 	.word	0x20000412
 80005e8:	20000310 	.word	0x20000310
 80005ec:	20000188 	.word	0x20000188

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b098      	sub	sp, #96	; 0x60
 80005f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fd3b 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f97b 	bl	80008f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fafb 	bl	8000bf8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 fac9 	bl	8000b98 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000606:	f000 f9c9 	bl	800099c <MX_ADC1_Init>
  MX_TIM3_Init();
 800060a:	f000 fa37 	bl	8000a7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Setup UART interrupt
  HAL_UART_Receive_IT(&huart2, &rxBuffer[uartWriteIdx], 1);
 800060e:	4bae      	ldr	r3, [pc, #696]	; (80008c8 <main+0x2d8>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	4bad      	ldr	r3, [pc, #692]	; (80008cc <main+0x2dc>)
 8000616:	4413      	add	r3, r2
 8000618:	2201      	movs	r2, #1
 800061a:	4619      	mov	r1, r3
 800061c:	48ac      	ldr	r0, [pc, #688]	; (80008d0 <main+0x2e0>)
 800061e:	f004 fd61 	bl	80050e4 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t value = 900;
 8000622:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000626:	623b      	str	r3, [r7, #32]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000628:	2100      	movs	r1, #0
 800062a:	48aa      	ldr	r0, [pc, #680]	; (80008d4 <main+0x2e4>)
 800062c:	f003 fd6c 	bl	8004108 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000630:	2104      	movs	r1, #4
 8000632:	48a8      	ldr	r0, [pc, #672]	; (80008d4 <main+0x2e4>)
 8000634:	f003 fd68 	bl	8004108 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000638:	2108      	movs	r1, #8
 800063a:	48a6      	ldr	r0, [pc, #664]	; (80008d4 <main+0x2e4>)
 800063c:	f003 fd64 	bl	8004108 <HAL_TIM_PWM_Start>


  // Setup dropper to closed
  SetResetBar(0);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff ff3d 	bl	80004c0 <SetResetBar>

  while (1)
  {

	  // Check for commands from PC
	  if (uartAvailable()) {
 8000646:	f7ff ff53 	bl	80004f0 <uartAvailable>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d049      	beq.n	80006e4 <main+0xf4>

		  char v = uartRead();
 8000650:	f7ff ff62 	bl	8000518 <uartRead>
 8000654:	4603      	mov	r3, r0
 8000656:	77fb      	strb	r3, [r7, #31]

		  if (v == 'i') { // Image data
 8000658:	7ffb      	ldrb	r3, [r7, #31]
 800065a:	2b69      	cmp	r3, #105	; 0x69
 800065c:	d13c      	bne.n	80006d8 <main+0xe8>


			  sprintf(PrintBuffer, "Receiving new image data\n");
 800065e:	499e      	ldr	r1, [pc, #632]	; (80008d8 <main+0x2e8>)
 8000660:	489e      	ldr	r0, [pc, #632]	; (80008dc <main+0x2ec>)
 8000662:	f005 fe8d 	bl	8006380 <siprintf>
			  HAL_UART_Transmit(&huart2, PrintBuffer, strlen(PrintBuffer), 1000);
 8000666:	489d      	ldr	r0, [pc, #628]	; (80008dc <main+0x2ec>)
 8000668:	f7ff fdb2 	bl	80001d0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000674:	4999      	ldr	r1, [pc, #612]	; (80008dc <main+0x2ec>)
 8000676:	4896      	ldr	r0, [pc, #600]	; (80008d0 <main+0x2e0>)
 8000678:	f004 fcaa 	bl	8004fd0 <HAL_UART_Transmit>

			  for (int i = 0; i < 16; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000680:	e00b      	b.n	800069a <main+0xaa>
				  ImageData[i] = uartRead();
 8000682:	f7ff ff49 	bl	8000518 <uartRead>
 8000686:	4603      	mov	r3, r0
 8000688:	4619      	mov	r1, r3
 800068a:	4a95      	ldr	r2, [pc, #596]	; (80008e0 <main+0x2f0>)
 800068c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800068e:	4413      	add	r3, r2
 8000690:	460a      	mov	r2, r1
 8000692:	701a      	strb	r2, [r3, #0]
			  for (int i = 0; i < 16; i++) {
 8000694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000696:	3301      	adds	r3, #1
 8000698:	64fb      	str	r3, [r7, #76]	; 0x4c
 800069a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800069c:	2b0f      	cmp	r3, #15
 800069e:	ddf0      	ble.n	8000682 <main+0x92>
			  }

			  // Drop reset bar
			  SetResetBar(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff0d 	bl	80004c0 <SetResetBar>
			  HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f000 fd47 	bl	800113c <HAL_Delay>
			  SetResetBar(0);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f7ff ff06 	bl	80004c0 <SetResetBar>
			  HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b8:	f000 fd40 	bl	800113c <HAL_Delay>

			  // Clear stacks
			  for (int i = 0; i < 8; i++) ColumnHeights[i] = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
 80006c0:	e007      	b.n	80006d2 <main+0xe2>
 80006c2:	4a88      	ldr	r2, [pc, #544]	; (80008e4 <main+0x2f4>)
 80006c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
 80006cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006ce:	3301      	adds	r3, #1
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80006d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006d4:	2b07      	cmp	r3, #7
 80006d6:	ddf4      	ble.n	80006c2 <main+0xd2>

		  }

		  // Await terminator
		  while (uartRead() != ';');
 80006d8:	bf00      	nop
 80006da:	f7ff ff1d 	bl	8000518 <uartRead>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b3b      	cmp	r3, #59	; 0x3b
 80006e2:	d1fa      	bne.n	80006da <main+0xea>

	  }

	  // Read current candy color
	  Reading reading;
	  CaptureReading(&reading);
 80006e4:	463b      	mov	r3, r7
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fe38 	bl	800035c <CaptureReading>
	  uint32_t closestDist = 0xffffffff;
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f0:	647b      	str	r3, [r7, #68]	; 0x44
	  int closestReadingIdx = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
	  for (int i = 0; i < sizeof(KnownValues) / sizeof(*KnownValues); i++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80006fa:	e018      	b.n	800072e <main+0x13e>
		  uint32_t dist = CalculateDistance(KnownValues[i], reading);
 80006fc:	4a7a      	ldr	r2, [pc, #488]	; (80008e8 <main+0x2f8>)
 80006fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	18d4      	adds	r4, r2, r3
 8000704:	466d      	mov	r5, sp
 8000706:	463b      	mov	r3, r7
 8000708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800070e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000712:	f7ff fdb5 	bl	8000280 <CalculateDistance>
 8000716:	6138      	str	r0, [r7, #16]
		  if (dist < closestDist) {
 8000718:	693a      	ldr	r2, [r7, #16]
 800071a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800071c:	429a      	cmp	r2, r3
 800071e:	d203      	bcs.n	8000728 <main+0x138>
			  closestDist = dist;
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
			  closestReadingIdx = i;
 8000724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
	  for (int i = 0; i < sizeof(KnownValues) / sizeof(*KnownValues); i++) {
 8000728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800072a:	3301      	adds	r3, #1
 800072c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800072e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000730:	2b03      	cmp	r3, #3
 8000732:	d9e3      	bls.n	80006fc <main+0x10c>
		  }
	  }

	  sprintf(PrintBuffer, "%d, %d, %d, \"%s\" (guess)\n", reading.red, reading.green, reading.blue, KnownValues[closestReadingIdx].data);
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4c6b      	ldr	r4, [pc, #428]	; (80008e8 <main+0x2f8>)
 800073c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800073e:	0112      	lsls	r2, r2, #4
 8000740:	4422      	add	r2, r4
 8000742:	320c      	adds	r2, #12
 8000744:	6812      	ldr	r2, [r2, #0]
 8000746:	9201      	str	r2, [sp, #4]
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	4603      	mov	r3, r0
 800074c:	460a      	mov	r2, r1
 800074e:	4967      	ldr	r1, [pc, #412]	; (80008ec <main+0x2fc>)
 8000750:	4862      	ldr	r0, [pc, #392]	; (80008dc <main+0x2ec>)
 8000752:	f005 fe15 	bl	8006380 <siprintf>
	  HAL_UART_Transmit(&huart2, PrintBuffer, strlen(PrintBuffer), 1000);
 8000756:	4861      	ldr	r0, [pc, #388]	; (80008dc <main+0x2ec>)
 8000758:	f7ff fd3a 	bl	80001d0 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	b29a      	uxth	r2, r3
 8000760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000764:	495d      	ldr	r1, [pc, #372]	; (80008dc <main+0x2ec>)
 8000766:	485a      	ldr	r0, [pc, #360]	; (80008d0 <main+0x2e0>)
 8000768:	f004 fc32 	bl	8004fd0 <HAL_UART_Transmit>

	  // Select appropriate destination and send chute there, marking slot in array
	  int chute = 8; // Drop in last chute if no matches
 800076c:	2308      	movs	r3, #8
 800076e:	63bb      	str	r3, [r7, #56]	; 0x38
	  for (int x = 0; x < 8; x++) {
 8000770:	2300      	movs	r3, #0
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
 8000774:	e028      	b.n	80007c8 <main+0x1d8>
		  int y = 7 - ColumnHeights[x];
 8000776:	4a5b      	ldr	r2, [pc, #364]	; (80008e4 <main+0x2f4>)
 8000778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800077a:	4413      	add	r3, r2
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	61bb      	str	r3, [r7, #24]
		  if (y < 0) continue;
 8000784:	69bb      	ldr	r3, [r7, #24]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <main+0x1d0>
		  if (GetPixelColor(x, y) == closestReadingIdx) {
 800078a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800078c:	b2db      	uxtb	r3, r3
 800078e:	69ba      	ldr	r2, [r7, #24]
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fed3 	bl	8000540 <GetPixelColor>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d10e      	bne.n	80007c2 <main+0x1d2>
			  chute = x;
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
			  ColumnHeights[chute]++;
 80007a8:	4a4e      	ldr	r2, [pc, #312]	; (80008e4 <main+0x2f4>)
 80007aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	3301      	adds	r3, #1
 80007b2:	b2d9      	uxtb	r1, r3
 80007b4:	4a4b      	ldr	r2, [pc, #300]	; (80008e4 <main+0x2f4>)
 80007b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007b8:	4413      	add	r3, r2
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
			  break;
 80007be:	e006      	b.n	80007ce <main+0x1de>
		  if (y < 0) continue;
 80007c0:	bf00      	nop
	  for (int x = 0; x < 8; x++) {
 80007c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c4:	3301      	adds	r3, #1
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	2b07      	cmp	r3, #7
 80007cc:	ddd3      	ble.n	8000776 <main+0x186>
		  }
	  }
	  sprintf(PrintBuffer, "Sending %s ball to chute %d\n", KnownValues[closestReadingIdx].data, chute);
 80007ce:	4a46      	ldr	r2, [pc, #280]	; (80008e8 <main+0x2f8>)
 80007d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	4413      	add	r3, r2
 80007d6:	330c      	adds	r3, #12
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007dc:	4944      	ldr	r1, [pc, #272]	; (80008f0 <main+0x300>)
 80007de:	483f      	ldr	r0, [pc, #252]	; (80008dc <main+0x2ec>)
 80007e0:	f005 fdce 	bl	8006380 <siprintf>
	  HAL_UART_Transmit(&huart2, PrintBuffer, strlen(PrintBuffer), 1000);
 80007e4:	483d      	ldr	r0, [pc, #244]	; (80008dc <main+0x2ec>)
 80007e6:	f7ff fcf3 	bl	80001d0 <strlen>
 80007ea:	4603      	mov	r3, r0
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	493a      	ldr	r1, [pc, #232]	; (80008dc <main+0x2ec>)
 80007f4:	4836      	ldr	r0, [pc, #216]	; (80008d0 <main+0x2e0>)
 80007f6:	f004 fbeb 	bl	8004fd0 <HAL_UART_Transmit>

	  SendChuteTo(chute);
 80007fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80007fc:	f7ff fe4e 	bl	800049c <SendChuteTo>

	  // Render out current model of the output.
	  // Lower case is to-be-placed, upper is already-placed balls
	  char *buf = PrintBuffer;
 8000800:	4b36      	ldr	r3, [pc, #216]	; (80008dc <main+0x2ec>)
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
	  for (int y = 0; y < 8; y++) {
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000808:	e039      	b.n	800087e <main+0x28e>
		  for (int x = 0; x < 8; x++) {
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
 800080e:	e02a      	b.n	8000866 <main+0x276>
			  int color = GetPixelColor(x, y);
 8000810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000812:	b2db      	uxtb	r3, r3
 8000814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe90 	bl	8000540 <GetPixelColor>
 8000820:	4603      	mov	r3, r0
 8000822:	617b      	str	r3, [r7, #20]
			  char symbol = KnownValues[color].data[0];
 8000824:	4a30      	ldr	r2, [pc, #192]	; (80008e8 <main+0x2f8>)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	011b      	lsls	r3, r3, #4
 800082a:	4413      	add	r3, r2
 800082c:	330c      	adds	r3, #12
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  if (y < (8-ColumnHeights[x])) {
 8000836:	4a2b      	ldr	r2, [pc, #172]	; (80008e4 <main+0x2f4>)
 8000838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083a:	4413      	add	r3, r2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	f1c3 0308 	rsb	r3, r3, #8
 8000842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000844:	429a      	cmp	r2, r3
 8000846:	da04      	bge.n	8000852 <main+0x262>
				  symbol += 'a' - 'A';
 8000848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800084c:	3320      	adds	r3, #32
 800084e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  }
			  *buf = symbol;
 8000852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000854:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000858:	701a      	strb	r2, [r3, #0]
			  buf++;
 800085a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800085c:	3301      	adds	r3, #1
 800085e:	633b      	str	r3, [r7, #48]	; 0x30
		  for (int x = 0; x < 8; x++) {
 8000860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000862:	3301      	adds	r3, #1
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
 8000866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000868:	2b07      	cmp	r3, #7
 800086a:	ddd1      	ble.n	8000810 <main+0x220>
		  }
		  *buf = '\n';
 800086c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800086e:	220a      	movs	r2, #10
 8000870:	701a      	strb	r2, [r3, #0]
		  buf++;
 8000872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000874:	3301      	adds	r3, #1
 8000876:	633b      	str	r3, [r7, #48]	; 0x30
	  for (int y = 0; y < 8; y++) {
 8000878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087a:	3301      	adds	r3, #1
 800087c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800087e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000880:	2b07      	cmp	r3, #7
 8000882:	ddc2      	ble.n	800080a <main+0x21a>
	  }
	  *buf = 0;
 8000884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, PrintBuffer, strlen(PrintBuffer), 1000);
 800088a:	4814      	ldr	r0, [pc, #80]	; (80008dc <main+0x2ec>)
 800088c:	f7ff fca0 	bl	80001d0 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000898:	4910      	ldr	r1, [pc, #64]	; (80008dc <main+0x2ec>)
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <main+0x2e0>)
 800089c:	f004 fb98 	bl	8004fd0 <HAL_UART_Transmit>


	  // Wait small amount
	  HAL_Delay(1000);
 80008a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a4:	f000 fc4a 	bl	800113c <HAL_Delay>

	  // Rotate distributor into dropping position
	  SetDistributorPosition(1);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f7ff fddf 	bl	800046c <SetDistributorPosition>

	  // Wait small amount
	  HAL_Delay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f000 fc43 	bl	800113c <HAL_Delay>

	  // Rotate distributor into sensing position
	  SetDistributorPosition(0);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fdd8 	bl	800046c <SetDistributorPosition>

	  // Wait small amount
	  HAL_Delay(1000);
 80008bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c0:	f000 fc3c 	bl	800113c <HAL_Delay>
  {
 80008c4:	e6bf      	b.n	8000646 <main+0x56>
 80008c6:	bf00      	nop
 80008c8:	20000411 	.word	0x20000411
 80008cc:	20000310 	.word	0x20000310
 80008d0:	20000188 	.word	0x20000188
 80008d4:	2000013c 	.word	0x2000013c
 80008d8:	08006cfc 	.word	0x08006cfc
 80008dc:	20000210 	.word	0x20000210
 80008e0:	20000414 	.word	0x20000414
 80008e4:	20000424 	.word	0x20000424
 80008e8:	20000000 	.word	0x20000000
 80008ec:	08006d18 	.word	0x08006d18
 80008f0:	08006d34 	.word	0x08006d34

080008f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b096      	sub	sp, #88	; 0x58
 80008f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fe:	2228      	movs	r2, #40	; 0x28
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f005 fd5c 	bl	80063c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800093c:	4618      	mov	r0, r3
 800093e:	f001 ff91 	bl	8002864 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000948:	f000 f9a0 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f002 ffba 	bl	80038e0 <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000972:	f000 f98b 	bl	8000c8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800097c:	2300      	movs	r3, #0
 800097e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f003 f9e2 	bl	8003d4c <HAL_RCCEx_PeriphCLKConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800098e:	f000 f97d 	bl	8000c8c <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3758      	adds	r7, #88	; 0x58
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
 80009bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009c6:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009c8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ce:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009d4:	4b28      	ldr	r3, [pc, #160]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009da:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009dc:	2201      	movs	r2, #1
 80009de:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_ADC1_Init+0xdc>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a1a:	4817      	ldr	r0, [pc, #92]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a1c:	f000 fbb2 	bl	8001184 <HAL_ADC_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a26:	f000 f931 	bl	8000c8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	4810      	ldr	r0, [pc, #64]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a36:	f001 f9bd 	bl	8001db4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000a40:	f000 f924 	bl	8000c8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a44:	2301      	movs	r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_ADC1_Init+0xdc>)
 8000a62:	f000 fee9 	bl	8001838 <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000a6c:	f000 f90e 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000ec 	.word	0x200000ec

08000a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a90:	f107 031c 	add.w	r3, r7, #28
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
 8000aaa:	615a      	str	r2, [r3, #20]
 8000aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000aae:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000ab0:	4a38      	ldr	r2, [pc, #224]	; (8000b94 <MX_TIM3_Init+0x118>)
 8000ab2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 8000ab4:	4b36      	ldr	r3, [pc, #216]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b35      	ldr	r3, [pc, #212]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8000ac0:	4b33      	ldr	r3, [pc, #204]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000ac2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ac6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ace:	4b30      	ldr	r3, [pc, #192]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ad4:	482e      	ldr	r0, [pc, #184]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000ad6:	f003 fa5f 	bl	8003f98 <HAL_TIM_Base_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ae0:	f000 f8d4 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aee:	4619      	mov	r1, r3
 8000af0:	4827      	ldr	r0, [pc, #156]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000af2:	f003 fd09 	bl	8004508 <HAL_TIM_ConfigClockSource>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000afc:	f000 f8c6 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b00:	4823      	ldr	r0, [pc, #140]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000b02:	f003 faa0 	bl	8004046 <HAL_TIM_PWM_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b0c:	f000 f8be 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	481c      	ldr	r0, [pc, #112]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000b20:	f004 f99a 	bl	8004e58 <HAL_TIMEx_MasterConfigSynchronization>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000b2a:	f000 f8af 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b2e:	2360      	movs	r3, #96	; 0x60
 8000b30:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4812      	ldr	r0, [pc, #72]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000b46:	f003 fbcb 	bl	80042e0 <HAL_TIM_PWM_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000b50:	f000 f89c 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	2204      	movs	r2, #4
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000b5c:	f003 fbc0 	bl	80042e0 <HAL_TIM_PWM_ConfigChannel>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000b66:	f000 f891 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000b72:	f003 fbb5 	bl	80042e0 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8000b7c:	f000 f886 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b80:	4803      	ldr	r0, [pc, #12]	; (8000b90 <MX_TIM3_Init+0x114>)
 8000b82:	f000 f92f 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3738      	adds	r7, #56	; 0x38
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000013c 	.word	0x2000013c
 8000b94:	40000400 	.word	0x40000400

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000b9e:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <MX_USART2_UART_Init+0x5c>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000ba2:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000ba4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bda:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <MX_USART2_UART_Init+0x58>)
 8000bdc:	f004 f9aa 	bl	8004f34 <HAL_UART_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000be6:	f000 f851 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000188 	.word	0x20000188
 8000bf4:	40004400 	.word	0x40004400

08000bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a17      	ldr	r2, [pc, #92]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_GPIO_Init+0x90>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c56:	2200      	movs	r2, #0
 8000c58:	21ba      	movs	r1, #186	; 0xba
 8000c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5e:	f001 fde9 	bl	8002834 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA3 PA4 PA5
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8000c62:	23ba      	movs	r3, #186	; 0xba
 8000c64:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f001 fc68 	bl	8002550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40021000 	.word	0x40021000

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <Error_Handler+0x8>
	...

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6193      	str	r3, [r2, #24]
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_MspInit+0x44>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d00:	d124      	bne.n	8000d4c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d24:	6153      	str	r3, [r2, #20]
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_ADC_MspInit+0x74>)
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d36:	2303      	movs	r3, #3
 8000d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f001 fc02 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3728      	adds	r7, #40	; 0x28
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a1c      	ldr	r2, [pc, #112]	; (8000dd8 <HAL_TIM_Base_MspInit+0x80>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10c      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d82:	e022      	b.n	8000dca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d8c:	d10c      	bne.n	8000da8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
}
 8000da6:	e010      	b.n	8000dca <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <HAL_TIM_Base_MspInit+0x88>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10b      	bne.n	8000dca <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <HAL_TIM_Base_MspInit+0x84>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
}
 8000dca:	bf00      	nop
 8000dcc:	371c      	adds	r7, #28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40012c00 	.word	0x40012c00
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40000400 	.word	0x40000400

08000de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <HAL_TIM_MspPostInit+0x9c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d138      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e08:	695b      	ldr	r3, [r3, #20]
 8000e0a:	4a1e      	ldr	r2, [pc, #120]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	6153      	str	r3, [r2, #20]
 8000e12:	4b1c      	ldr	r3, [pc, #112]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6153      	str	r3, [r2, #20]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_TIM_MspPostInit+0xa0>)
 8000e2c:	695b      	ldr	r3, [r3, #20]
 8000e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e36:	2340      	movs	r3, #64	; 0x40
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e46:	2302      	movs	r3, #2
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e54:	f001 fb7c 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 8000e58:	2321      	movs	r3, #33	; 0x21
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_TIM_MspPostInit+0xa4>)
 8000e74:	f001 fb6c 	bl	8002550 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a1c      	ldr	r2, [pc, #112]	; (8000f1c <HAL_UART_MspInit+0x90>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d131      	bne.n	8000f12 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x94>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x94>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x94>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0x94>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x94>)
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	6153      	str	r3, [r2, #20]
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_UART_MspInit+0x94>)
 8000ed4:	695b      	ldr	r3, [r3, #20]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ede:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efe:	f001 fb27 	bl	8002550 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2026      	movs	r0, #38	; 0x26
 8000f08:	f001 fa75 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f0c:	2026      	movs	r0, #38	; 0x26
 8000f0e:	f001 fa8e 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f8c4 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <USART2_IRQHandler+0x10>)
 8000f7e:	f004 f8f5 	bl	800516c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000188 	.word	0x20000188

08000f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_sbrk+0x5c>)
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <_sbrk+0x60>)
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <_sbrk+0x64>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d102      	bne.n	8000fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <_sbrk+0x64>)
 8000faa:	4a12      	ldr	r2, [pc, #72]	; (8000ff4 <_sbrk+0x68>)
 8000fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <_sbrk+0x64>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d207      	bcs.n	8000fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fbc:	f005 fa08 	bl	80063d0 <__errno>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fca:	e009      	b.n	8000fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <_sbrk+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd2:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <_sbrk+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fde:	68fb      	ldr	r3, [r7, #12]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20003000 	.word	0x20003000
 8000fec:	00000400 	.word	0x00000400
 8000ff0:	2000042c 	.word	0x2000042c
 8000ff4:	20000580 	.word	0x20000580

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001020:	f7ff ffea 	bl	8000ff8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0a      	ldr	r4, [pc, #40]	; (8001068 <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800104a:	f005 f9c7 	bl	80063dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104e:	f7ff facf 	bl	80005f0 <main>

08001052 <LoopForever>:

LoopForever:
    b LoopForever
 8001052:	e7fe      	b.n	8001052 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001054:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 8001060:	08006dc8 	.word	0x08006dc8
  ldr r2, =_sbss
 8001064:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 8001068:	2000057c 	.word	0x2000057c

0800106c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC1_2_IRQHandler>
	...

08001070 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <HAL_Init+0x28>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a07      	ldr	r2, [pc, #28]	; (8001098 <HAL_Init+0x28>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f001 f9ad 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f808 	bl	800109c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800108c:	f7ff fe04 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40022000 	.word	0x40022000

0800109c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x54>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x58>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 f9c5 	bl	800244a <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e00e      	b.n	80010e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d80a      	bhi.n	80010e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d8:	f001 f98d 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_InitTick+0x5c>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000074 	.word	0x20000074
 80010f4:	2000007c 	.word	0x2000007c
 80010f8:	20000078 	.word	0x20000078

080010fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_IncTick+0x20>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x24>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4413      	add	r3, r2
 800110c:	4a04      	ldr	r2, [pc, #16]	; (8001120 <HAL_IncTick+0x24>)
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000007c 	.word	0x2000007c
 8001120:	20000430 	.word	0x20000430

08001124 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return uwTick;  
 8001128:	4b03      	ldr	r3, [pc, #12]	; (8001138 <HAL_GetTick+0x14>)
 800112a:	681b      	ldr	r3, [r3, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	20000430 	.word	0x20000430

0800113c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff ffee 	bl	8001124 <HAL_GetTick>
 8001148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001154:	d005      	beq.n	8001162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_Delay+0x44>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	461a      	mov	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4413      	add	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001162:	bf00      	nop
 8001164:	f7ff ffde 	bl	8001124 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	429a      	cmp	r2, r3
 8001172:	d8f7      	bhi.n	8001164 <HAL_Delay+0x28>
  {
  }
}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000007c 	.word	0x2000007c

08001184 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b09a      	sub	sp, #104	; 0x68
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001192:	2300      	movs	r3, #0
 8001194:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e172      	b.n	800148a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d176      	bne.n	80012a4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d152      	bne.n	8001264 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff fd81 	bl	8000ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d13b      	bne.n	8001264 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 ff0b 	bl	8002008 <ADC_Disable>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	f003 0310 	and.w	r3, r3, #16
 8001200:	2b00      	cmp	r3, #0
 8001202:	d12f      	bne.n	8001264 <HAL_ADC_Init+0xe0>
 8001204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001208:	2b00      	cmp	r3, #0
 800120a:	d12b      	bne.n	8001264 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001214:	f023 0302 	bic.w	r3, r3, #2
 8001218:	f043 0202 	orr.w	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800122e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800123e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001240:	4b94      	ldr	r3, [pc, #592]	; (8001494 <HAL_ADC_Init+0x310>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a94      	ldr	r2, [pc, #592]	; (8001498 <HAL_ADC_Init+0x314>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9a      	lsrs	r2, r3, #18
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001256:	e002      	b.n	800125e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3b01      	subs	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f9      	bne.n	8001258 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800127c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001280:	d110      	bne.n	80012a4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f023 0312 	bic.w	r3, r3, #18
 800128a:	f043 0210 	orr.w	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f040 80df 	bne.w	8001470 <HAL_ADC_Init+0x2ec>
 80012b2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f040 80da 	bne.w	8001470 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f040 80d2 	bne.w	8001470 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012d4:	f043 0202 	orr.w	r2, r3, #2
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012dc:	4b6f      	ldr	r3, [pc, #444]	; (800149c <HAL_ADC_Init+0x318>)
 80012de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012e8:	d102      	bne.n	80012f0 <HAL_ADC_Init+0x16c>
 80012ea:	4b6d      	ldr	r3, [pc, #436]	; (80014a0 <HAL_ADC_Init+0x31c>)
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e002      	b.n	80012f6 <HAL_ADC_Init+0x172>
 80012f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d108      	bne.n	8001316 <HAL_ADC_Init+0x192>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x192>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_ADC_Init+0x194>
 8001316:	2300      	movs	r3, #0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d11c      	bne.n	8001356 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800131c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800131e:	2b00      	cmp	r3, #0
 8001320:	d010      	beq.n	8001344 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b01      	cmp	r3, #1
 800132c:	d107      	bne.n	800133e <HAL_ADC_Init+0x1ba>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b01      	cmp	r3, #1
 8001338:	d101      	bne.n	800133e <HAL_ADC_Init+0x1ba>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_ADC_Init+0x1bc>
 800133e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001340:	2b00      	cmp	r3, #0
 8001342:	d108      	bne.n	8001356 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	431a      	orrs	r2, r3
 8001352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001354:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7e5b      	ldrb	r3, [r3, #25]
 800135a:	035b      	lsls	r3, r3, #13
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001360:	2a01      	cmp	r2, #1
 8001362:	d002      	beq.n	800136a <HAL_ADC_Init+0x1e6>
 8001364:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001368:	e000      	b.n	800136c <HAL_ADC_Init+0x1e8>
 800136a:	2200      	movs	r2, #0
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4313      	orrs	r3, r2
 800137a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800137c:	4313      	orrs	r3, r2
 800137e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d11b      	bne.n	80013c2 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7e5b      	ldrb	r3, [r3, #25]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d109      	bne.n	80013a6 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001396:	3b01      	subs	r3, #1
 8001398:	045a      	lsls	r2, r3, #17
 800139a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800139c:	4313      	orrs	r3, r2
 800139e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a2:	663b      	str	r3, [r7, #96]	; 0x60
 80013a4:	e00d      	b.n	80013c2 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80013ae:	f043 0220 	orr.w	r2, r3, #32
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	f043 0201 	orr.w	r2, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d007      	beq.n	80013da <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d2:	4313      	orrs	r3, r2
 80013d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013d6:	4313      	orrs	r3, r2
 80013d8:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d114      	bne.n	8001412 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f6:	f023 0302 	bic.w	r3, r3, #2
 80013fa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7e1b      	ldrb	r3, [r3, #24]
 8001400:	039a      	lsls	r2, r3, #14
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4313      	orrs	r3, r2
 800140c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800140e:	4313      	orrs	r3, r2
 8001410:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <HAL_ADC_Init+0x320>)
 800141a:	4013      	ands	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001422:	430b      	orrs	r3, r1
 8001424:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d10c      	bne.n	8001448 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f023 010f 	bic.w	r1, r3, #15
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	69db      	ldr	r3, [r3, #28]
 800143c:	1e5a      	subs	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	631a      	str	r2, [r3, #48]	; 0x30
 8001446:	e007      	b.n	8001458 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 020f 	bic.w	r2, r2, #15
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f023 0303 	bic.w	r3, r3, #3
 8001466:	f043 0201 	orr.w	r2, r3, #1
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
 800146e:	e00a      	b.n	8001486 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f023 0312 	bic.w	r3, r3, #18
 8001478:	f043 0210 	orr.w	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001486:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800148a:	4618      	mov	r0, r3
 800148c:	3768      	adds	r7, #104	; 0x68
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000074 	.word	0x20000074
 8001498:	431bde83 	.word	0x431bde83
 800149c:	50000300 	.word	0x50000300
 80014a0:	50000100 	.word	0x50000100
 80014a4:	fff0c007 	.word	0xfff0c007

080014a8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 809c 	bne.w	80015fc <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Start+0x2a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e097      	b.n	8001602 <HAL_ADC_Start+0x15a>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fd30 	bl	8001f40 <ADC_Enable>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f040 8083 	bne.w	80015f2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001500:	4b42      	ldr	r3, [pc, #264]	; (800160c <HAL_ADC_Start+0x164>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 031f 	and.w	r3, r3, #31
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_ADC_Start+0x6e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001514:	d115      	bne.n	8001542 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d027      	beq.n	8001580 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001538:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001540:	e01e      	b.n	8001580 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001556:	d004      	beq.n	8001562 <HAL_ADC_Start+0xba>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <HAL_ADC_Start+0x168>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10e      	bne.n	8001580 <HAL_ADC_Start+0xd8>
 8001562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158c:	d106      	bne.n	800159c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f023 0206 	bic.w	r2, r3, #6
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
 800159a:	e002      	b.n	80015a2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	221c      	movs	r2, #28
 80015b0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_Start+0x164>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d010      	beq.n	80015e0 <HAL_ADC_Start+0x138>
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_ADC_Start+0x164>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 031f 	and.w	r3, r3, #31
 80015c6:	2b05      	cmp	r3, #5
 80015c8:	d00a      	beq.n	80015e0 <HAL_ADC_Start+0x138>
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_ADC_Start+0x164>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 031f 	and.w	r3, r3, #31
 80015d2:	2b09      	cmp	r3, #9
 80015d4:	d004      	beq.n	80015e0 <HAL_ADC_Start+0x138>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015de:	d10f      	bne.n	8001600 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0204 	orr.w	r2, r2, #4
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	e006      	b.n	8001600 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015fa:	e001      	b.n	8001600 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
 80015fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001600:	7bfb      	ldrb	r3, [r7, #15]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	50000300 	.word	0x50000300
 8001610:	50000100 	.word	0x50000100

08001614 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ADC_Stop+0x1a>
 800162a:	2302      	movs	r3, #2
 800162c:	e023      	b.n	8001676 <HAL_ADC_Stop+0x62>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001636:	216c      	movs	r1, #108	; 0x6c
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fd4b 	bl	80020d4 <ADC_ConversionStop>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d111      	bne.n	800166c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fcdd 	bl	8002008 <ADC_Disable>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d109      	bne.n	800166c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	2b08      	cmp	r3, #8
 8001694:	d102      	bne.n	800169c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001696:	2308      	movs	r3, #8
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e02e      	b.n	80016fa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_ADC_PollForConversion+0x198>)
 800169e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d112      	bne.n	80016d2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d11d      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	f043 0220 	orr.w	r2, r3, #32
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e09d      	b.n	800180e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00b      	beq.n	80016f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f043 0220 	orr.w	r2, r3, #32
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e08b      	b.n	800180e <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80016fa:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_ADC_PollForConversion+0x198>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 031f 	and.w	r3, r3, #31
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_ADC_PollForConversion+0x90>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800170e:	d104      	bne.n	800171a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	e003      	b.n	8001722 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800171a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001722:	f7ff fcff 	bl	8001124 <HAL_GetTick>
 8001726:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001728:	e021      	b.n	800176e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001730:	d01d      	beq.n	800176e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <HAL_ADC_PollForConversion+0xc8>
 8001738:	f7ff fcf4 	bl	8001124 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d212      	bcs.n	800176e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10b      	bne.n	800176e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04f      	b.n	800180e <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	4013      	ands	r3, r2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0d6      	beq.n	800172a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001792:	2b00      	cmp	r3, #0
 8001794:	d131      	bne.n	80017fa <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800179c:	2b00      	cmp	r3, #0
 800179e:	d12c      	bne.n	80017fa <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d125      	bne.n	80017fa <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d112      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d112      	bne.n	80017fa <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f043 0201 	orr.w	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	; 0x40
 80017e0:	e00b      	b.n	80017fa <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f2:	f043 0201 	orr.w	r2, r3, #1
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d103      	bne.n	800180c <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	50000300 	.word	0x50000300

0800181c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
	...

08001838 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001838:	b480      	push	{r7}
 800183a:	b09b      	sub	sp, #108	; 0x6c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001852:	2b01      	cmp	r3, #1
 8001854:	d101      	bne.n	800185a <HAL_ADC_ConfigChannel+0x22>
 8001856:	2302      	movs	r3, #2
 8001858:	e2a1      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x566>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 8285 	bne.w	8001d7c <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b04      	cmp	r3, #4
 8001878:	d81c      	bhi.n	80018b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	461a      	mov	r2, r3
 800188e:	231f      	movs	r3, #31
 8001890:	4093      	lsls	r3, r2
 8001892:	43db      	mvns	r3, r3
 8001894:	4019      	ands	r1, r3
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	fa00 f203 	lsl.w	r2, r0, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
 80018b2:	e063      	b.n	800197c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b09      	cmp	r3, #9
 80018ba:	d81e      	bhi.n	80018fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	3b1e      	subs	r3, #30
 80018d0:	221f      	movs	r2, #31
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	4019      	ands	r1, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	3b1e      	subs	r3, #30
 80018ec:	fa00 f203 	lsl.w	r2, r0, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
 80018f8:	e040      	b.n	800197c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b0e      	cmp	r3, #14
 8001900:	d81e      	bhi.n	8001940 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	3b3c      	subs	r3, #60	; 0x3c
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	4019      	ands	r1, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	3b3c      	subs	r3, #60	; 0x3c
 8001932:	fa00 f203 	lsl.w	r2, r0, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	639a      	str	r2, [r3, #56]	; 0x38
 800193e:	e01d      	b.n	800197c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	3b5a      	subs	r3, #90	; 0x5a
 8001954:	221f      	movs	r2, #31
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	4019      	ands	r1, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	3b5a      	subs	r3, #90	; 0x5a
 8001970:	fa00 f203 	lsl.w	r2, r0, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 80e5 	bne.w	8001b56 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b09      	cmp	r3, #9
 8001992:	d91c      	bls.n	80019ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6999      	ldr	r1, [r3, #24]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	3b1e      	subs	r3, #30
 80019a6:	2207      	movs	r2, #7
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	4019      	ands	r1, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	6898      	ldr	r0, [r3, #8]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	3b1e      	subs	r3, #30
 80019c0:	fa00 f203 	lsl.w	r2, r0, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]
 80019cc:	e019      	b.n	8001a02 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6959      	ldr	r1, [r3, #20]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	2207      	movs	r2, #7
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6898      	ldr	r0, [r3, #8]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	695a      	ldr	r2, [r3, #20]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	08db      	lsrs	r3, r3, #3
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d84f      	bhi.n	8001ac4 <HAL_ADC_ConfigChannel+0x28c>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <HAL_ADC_ConfigChannel+0x1f4>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a5f 	.word	0x08001a5f
 8001a34:	08001a81 	.word	0x08001a81
 8001a38:	08001aa3 	.word	0x08001aa3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a42:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <HAL_ADC_ConfigChannel+0x47c>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	0691      	lsls	r1, r2, #26
 8001a4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	431a      	orrs	r2, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a5c:	e07b      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a64:	4b93      	ldr	r3, [pc, #588]	; (8001cb4 <HAL_ADC_ConfigChannel+0x47c>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	0691      	lsls	r1, r2, #26
 8001a6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a70:	430a      	orrs	r2, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a7e:	e06a      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_ADC_ConfigChannel+0x47c>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	0691      	lsls	r1, r2, #26
 8001a90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a92:	430a      	orrs	r2, r1
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001aa0:	e059      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001aa8:	4b82      	ldr	r3, [pc, #520]	; (8001cb4 <HAL_ADC_ConfigChannel+0x47c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	0691      	lsls	r1, r2, #26
 8001ab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ac0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ac2:	e048      	b.n	8001b56 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	069b      	lsls	r3, r3, #26
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d107      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ae6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001aee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	069b      	lsls	r3, r3, #26
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d107      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	069b      	lsls	r3, r3, #26
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d107      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	069b      	lsls	r3, r3, #26
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d107      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001b54:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d108      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x33e>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x33e>
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x340>
 8001b76:	2300      	movs	r3, #0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f040 810a 	bne.w	8001d92 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d00f      	beq.n	8001ba6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2201      	movs	r2, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43da      	mvns	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001ba4:	e049      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b09      	cmp	r3, #9
 8001bc6:	d91c      	bls.n	8001c02 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6999      	ldr	r1, [r3, #24]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b1b      	subs	r3, #27
 8001bda:	2207      	movs	r2, #7
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	4019      	ands	r1, r3
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	6898      	ldr	r0, [r3, #8]
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b1b      	subs	r3, #27
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	e01b      	b.n	8001c3a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6959      	ldr	r1, [r3, #20]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	1c5a      	adds	r2, r3, #1
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	2207      	movs	r2, #7
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	4019      	ands	r1, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6898      	ldr	r0, [r3, #8]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4613      	mov	r3, r2
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	4413      	add	r3, r2
 8001c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_ADC_ConfigChannel+0x480>)
 8001c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d105      	bne.n	8001c52 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d015      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001c56:	2b11      	cmp	r3, #17
 8001c58:	d105      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	f040 8091 	bne.w	8001d92 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 808a 	bne.w	8001d92 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c86:	d102      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x456>
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <HAL_ADC_ConfigChannel+0x484>)
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	e002      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x45c>
 8001c8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c92:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d10e      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x488>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x488>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e006      	b.n	8001cc2 <HAL_ADC_ConfigChannel+0x48a>
 8001cb4:	83fff000 	.word	0x83fff000
 8001cb8:	50000300 	.word	0x50000300
 8001cbc:	50000100 	.word	0x50000100
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d150      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d010      	beq.n	8001cee <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d107      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x4b0>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x4b0>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_ADC_ConfigChannel+0x4b2>
 8001ce8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13c      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2b10      	cmp	r3, #16
 8001cf4:	d11d      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x4fa>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cfe:	d118      	bne.n	8001d32 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d0c:	4b27      	ldr	r3, [pc, #156]	; (8001dac <HAL_ADC_ConfigChannel+0x574>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <HAL_ADC_ConfigChannel+0x578>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9a      	lsrs	r2, r3, #18
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d22:	e002      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1f9      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d30:	e02e      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b11      	cmp	r3, #17
 8001d38:	d10b      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x51a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d42:	d106      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d50:	e01e      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2b12      	cmp	r3, #18
 8001d58:	d11a      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d66:	e013      	b.n	8001d90 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0220 	orr.w	r2, r3, #32
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d7a:	e00a      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d8e:	e000      	b.n	8001d92 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d90:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	376c      	adds	r7, #108	; 0x6c
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000074 	.word	0x20000074
 8001db0:	431bde83 	.word	0x431bde83

08001db4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b099      	sub	sp, #100	; 0x64
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dcc:	d102      	bne.n	8001dd4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	e002      	b.n	8001dda <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001dd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dd8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0a2      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d101      	bne.n	8001df2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e09b      	b.n	8001f2a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d17f      	bne.n	8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d179      	bne.n	8001f08 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001e16:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d040      	beq.n	8001ea2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e32:	035b      	lsls	r3, r3, #13
 8001e34:	430b      	orrs	r3, r1
 8001e36:	431a      	orrs	r2, r3
 8001e38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e3a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d108      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d15c      	bne.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d107      	bne.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d101      	bne.n	8001e7e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e000      	b.n	8001e80 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001e7e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d14b      	bne.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001e84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001e8c:	f023 030f 	bic.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6811      	ldr	r1, [r2, #0]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	6892      	ldr	r2, [r2, #8]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e9e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ea0:	e03c      	b.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001ea2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eac:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0303 	and.w	r3, r3, #3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d123      	bne.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001ef0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d112      	bne.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ef6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001efe:	f023 030f 	bic.w	r3, r3, #15
 8001f02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f04:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f06:	e009      	b.n	8001f1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001f1a:	e000      	b.n	8001f1e <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001f1c:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3764      	adds	r7, #100	; 0x64
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	50000100 	.word	0x50000100
 8001f3c:	50000300 	.word	0x50000300

08001f40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d108      	bne.n	8001f6c <ADC_Enable+0x2c>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <ADC_Enable+0x2c>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <ADC_Enable+0x2e>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d143      	bne.n	8001ffa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <ADC_Enable+0xc4>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00d      	beq.n	8001f9c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e02f      	b.n	8001ffc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0201 	orr.w	r2, r2, #1
 8001faa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001fac:	f7ff f8ba 	bl	8001124 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fb2:	e01b      	b.n	8001fec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fb4:	f7ff f8b6 	bl	8001124 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d914      	bls.n	8001fec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d00d      	beq.n	8001fec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f043 0210 	orr.w	r2, r3, #16
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe0:	f043 0201 	orr.w	r2, r3, #1
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e007      	b.n	8001ffc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d1dc      	bne.n	8001fb4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	8000003f 	.word	0x8000003f

08002008 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d108      	bne.n	8002034 <ADC_Disable+0x2c>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <ADC_Disable+0x2c>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <ADC_Disable+0x2e>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d047      	beq.n	80020ca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030d 	and.w	r3, r3, #13
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10f      	bne.n	8002068 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689a      	ldr	r2, [r3, #8]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0202 	orr.w	r2, r2, #2
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2203      	movs	r2, #3
 800205e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002060:	f7ff f860 	bl	8001124 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002066:	e029      	b.n	80020bc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f043 0210 	orr.w	r2, r3, #16
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e023      	b.n	80020cc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002084:	f7ff f84e 	bl	8001124 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d914      	bls.n	80020bc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b01      	cmp	r3, #1
 800209e:	d10d      	bne.n	80020bc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a4:	f043 0210 	orr.w	r2, r3, #16
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f043 0201 	orr.w	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e007      	b.n	80020cc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d0dc      	beq.n	8002084 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 809b 	beq.w	8002230 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002108:	d12a      	bne.n	8002160 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800210e:	2b01      	cmp	r3, #1
 8002110:	d126      	bne.n	8002160 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002116:	2b01      	cmp	r3, #1
 8002118:	d122      	bne.n	8002160 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800211a:	230c      	movs	r3, #12
 800211c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800211e:	e014      	b.n	800214a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	4a46      	ldr	r2, [pc, #280]	; (800223c <ADC_ConversionStop+0x168>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d90d      	bls.n	8002144 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f043 0210 	orr.w	r2, r3, #16
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f043 0201 	orr.w	r2, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e076      	b.n	8002232 <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	3301      	adds	r3, #1
 8002148:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d1e3      	bne.n	8002120 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2240      	movs	r2, #64	; 0x40
 800215e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b60      	cmp	r3, #96	; 0x60
 8002164:	d015      	beq.n	8002192 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b04      	cmp	r3, #4
 8002172:	d10e      	bne.n	8002192 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0210 	orr.w	r2, r2, #16
 8002190:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d015      	beq.n	80021c4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b08      	cmp	r3, #8
 80021a4:	d10e      	bne.n	80021c4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d107      	bne.n	80021c4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0220 	orr.w	r2, r2, #32
 80021c2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b60      	cmp	r3, #96	; 0x60
 80021c8:	d005      	beq.n	80021d6 <ADC_ConversionStop+0x102>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b6c      	cmp	r3, #108	; 0x6c
 80021ce:	d105      	bne.n	80021dc <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021d0:	230c      	movs	r3, #12
 80021d2:	617b      	str	r3, [r7, #20]
        break;
 80021d4:	e005      	b.n	80021e2 <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021d6:	2308      	movs	r3, #8
 80021d8:	617b      	str	r3, [r7, #20]
        break;
 80021da:	e002      	b.n	80021e2 <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021dc:	2304      	movs	r3, #4
 80021de:	617b      	str	r3, [r7, #20]
        break;
 80021e0:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021e2:	f7fe ff9f 	bl	8001124 <HAL_GetTick>
 80021e6:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80021e8:	e01b      	b.n	8002222 <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021ea:	f7fe ff9b 	bl	8001124 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b0b      	cmp	r3, #11
 80021f6:	d914      	bls.n	8002222 <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f043 0210 	orr.w	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e007      	b.n	8002232 <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1dc      	bne.n	80021ea <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	000993ff 	.word	0x000993ff

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff29 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff3e 	bl	8002288 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff31 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002470:	2b02      	cmp	r3, #2
 8002472:	d008      	beq.n	8002486 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2204      	movs	r2, #4
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e020      	b.n	80024c8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 020e 	bic.w	r2, r2, #14
 8002494:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0201 	bic.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2201      	movs	r2, #1
 80024ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d005      	beq.n	80024f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2204      	movs	r2, #4
 80024ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e027      	b.n	8002546 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 020e 	bic.w	r2, r2, #14
 8002504:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	4798      	blx	r3
    } 
  }
  return status;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255e:	e14e      	b.n	80027fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	4013      	ands	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8140 	beq.w	80027f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d005      	beq.n	8002590 <HAL_GPIO_Init+0x40>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d130      	bne.n	80025f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025c6:	2201      	movs	r2, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	091b      	lsrs	r3, r3, #4
 80025dc:	f003 0201 	and.w	r2, r3, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d017      	beq.n	800262e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d123      	bne.n	8002682 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	08da      	lsrs	r2, r3, #3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3208      	adds	r2, #8
 8002642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	4013      	ands	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	08da      	lsrs	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3208      	adds	r2, #8
 800267c:	6939      	ldr	r1, [r7, #16]
 800267e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	2203      	movs	r2, #3
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43db      	mvns	r3, r3
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4013      	ands	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0203 	and.w	r2, r3, #3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 809a 	beq.w	80027f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026c4:	4b55      	ldr	r3, [pc, #340]	; (800281c <HAL_GPIO_Init+0x2cc>)
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	4a54      	ldr	r2, [pc, #336]	; (800281c <HAL_GPIO_Init+0x2cc>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6193      	str	r3, [r2, #24]
 80026d0:	4b52      	ldr	r3, [pc, #328]	; (800281c <HAL_GPIO_Init+0x2cc>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	60bb      	str	r3, [r7, #8]
 80026da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026dc:	4a50      	ldr	r2, [pc, #320]	; (8002820 <HAL_GPIO_Init+0x2d0>)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	089b      	lsrs	r3, r3, #2
 80026e2:	3302      	adds	r3, #2
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	220f      	movs	r2, #15
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002706:	d013      	beq.n	8002730 <HAL_GPIO_Init+0x1e0>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a46      	ldr	r2, [pc, #280]	; (8002824 <HAL_GPIO_Init+0x2d4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00d      	beq.n	800272c <HAL_GPIO_Init+0x1dc>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a45      	ldr	r2, [pc, #276]	; (8002828 <HAL_GPIO_Init+0x2d8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d007      	beq.n	8002728 <HAL_GPIO_Init+0x1d8>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a44      	ldr	r2, [pc, #272]	; (800282c <HAL_GPIO_Init+0x2dc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_GPIO_Init+0x1d4>
 8002720:	2303      	movs	r3, #3
 8002722:	e006      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 8002724:	2305      	movs	r3, #5
 8002726:	e004      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 8002728:	2302      	movs	r3, #2
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 8002730:	2300      	movs	r3, #0
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4093      	lsls	r3, r2
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002742:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_GPIO_Init+0x2d0>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	43db      	mvns	r3, r3
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4013      	ands	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002774:	4a2e      	ldr	r2, [pc, #184]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	43db      	mvns	r3, r3
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4013      	ands	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800279e:	4a24      	ldr	r2, [pc, #144]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027f2:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <HAL_GPIO_Init+0x2e0>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	3301      	adds	r3, #1
 80027fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	f47f aea9 	bne.w	8002560 <HAL_GPIO_Init+0x10>
  }
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40021000 	.word	0x40021000
 8002820:	40010000 	.word	0x40010000
 8002824:	48000400 	.word	0x48000400
 8002828:	48000800 	.word	0x48000800
 800282c:	48000c00 	.word	0x48000c00
 8002830:	40010400 	.word	0x40010400

08002834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	807b      	strh	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002844:	787b      	ldrb	r3, [r7, #1]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002850:	e002      	b.n	8002858 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002852:	887a      	ldrh	r2, [r7, #2]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800286a:	af00      	add	r7, sp, #0
 800286c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002870:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002874:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002876:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	f001 b823 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800288e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 817d 	beq.w	8002b9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028a0:	4bbc      	ldr	r3, [pc, #752]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ac:	4bb9      	ldr	r3, [pc, #740]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d15c      	bne.n	8002972 <HAL_RCC_OscConfig+0x10e>
 80028b8:	4bb6      	ldr	r3, [pc, #728]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c4:	d155      	bne.n	8002972 <HAL_RCC_OscConfig+0x10e>
 80028c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	095b      	lsrs	r3, r3, #5
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_RCC_OscConfig+0x94>
 80028f2:	4ba8      	ldr	r3, [pc, #672]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	e015      	b.n	8002924 <HAL_RCC_OscConfig+0xc0>
 80028f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800290c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002910:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002914:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002918:	fa93 f3a3 	rbit	r3, r3
 800291c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002920:	4b9c      	ldr	r3, [pc, #624]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002928:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800292c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002930:	fa92 f2a2 	rbit	r2, r2
 8002934:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002938:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	f042 0220 	orr.w	r2, r2, #32
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	f002 021f 	and.w	r2, r2, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f202 	lsl.w	r2, r1, r2
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 811f 	beq.w	8002b98 <HAL_RCC_OscConfig+0x334>
 800295a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 8116 	bne.w	8002b98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	f000 bfaf 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002976:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x12e>
 8002984:	4b83      	ldr	r3, [pc, #524]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a82      	ldr	r2, [pc, #520]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e036      	b.n	8002a00 <HAL_RCC_OscConfig+0x19c>
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x158>
 80029a2:	4b7c      	ldr	r3, [pc, #496]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7b      	ldr	r2, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b79      	ldr	r3, [pc, #484]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a78      	ldr	r2, [pc, #480]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e021      	b.n	8002a00 <HAL_RCC_OscConfig+0x19c>
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029cc:	d10c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x184>
 80029ce:	4b71      	ldr	r3, [pc, #452]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a70      	ldr	r2, [pc, #448]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	4b6e      	ldr	r3, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a6d      	ldr	r2, [pc, #436]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	e00b      	b.n	8002a00 <HAL_RCC_OscConfig+0x19c>
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a69      	ldr	r2, [pc, #420]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f2:	6013      	str	r3, [r2, #0]
 80029f4:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a66      	ldr	r2, [pc, #408]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a00:	4b64      	ldr	r3, [pc, #400]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a04:	f023 020f 	bic.w	r2, r3, #15
 8002a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a0c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	495f      	ldr	r1, [pc, #380]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d059      	beq.n	8002ade <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fb7b 	bl	8001124 <HAL_GetTick>
 8002a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	e00a      	b.n	8002a4a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a34:	f7fe fb76 	bl	8001124 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b64      	cmp	r3, #100	; 0x64
 8002a42:	d902      	bls.n	8002a4a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	f000 bf43 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
 8002a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002a5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d102      	bne.n	8002a7c <HAL_RCC_OscConfig+0x218>
 8002a76:	4b47      	ldr	r3, [pc, #284]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	e015      	b.n	8002aa8 <HAL_RCC_OscConfig+0x244>
 8002a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a80:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a84:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002a88:	fa93 f3a3 	rbit	r3, r3
 8002a8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a94:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a98:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ab0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ab4:	fa92 f2a2 	rbit	r2, r2
 8002ab8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002abc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ac0:	fab2 f282 	clz	r2, r2
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	f042 0220 	orr.w	r2, r2, #32
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	f002 021f 	and.w	r2, r2, #31
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ab      	beq.n	8002a34 <HAL_RCC_OscConfig+0x1d0>
 8002adc:	e05d      	b.n	8002b9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fb21 	bl	8001124 <HAL_GetTick>
 8002ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fb1c 	bl	8001124 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d902      	bls.n	8002afe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	f000 bee9 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
 8002afe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002b12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	fab3 f383 	clz	r3, r3
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d102      	bne.n	8002b30 <HAL_RCC_OscConfig+0x2cc>
 8002b2a:	4b1a      	ldr	r3, [pc, #104]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e015      	b.n	8002b5c <HAL_RCC_OscConfig+0x2f8>
 8002b30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002b4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002b50:	fa93 f3a3 	rbit	r3, r3
 8002b54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b58:	4b0e      	ldr	r3, [pc, #56]	; (8002b94 <HAL_RCC_OscConfig+0x330>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b60:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002b64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002b68:	fa92 f2a2 	rbit	r2, r2
 8002b6c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002b70:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002b74:	fab2 f282 	clz	r2, r2
 8002b78:	b2d2      	uxtb	r2, r2
 8002b7a:	f042 0220 	orr.w	r2, r2, #32
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	f002 021f 	and.w	r2, r2, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ab      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x284>
 8002b90:	e003      	b.n	8002b9a <HAL_RCC_OscConfig+0x336>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 817d 	beq.w	8002eaa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bb0:	4ba6      	ldr	r3, [pc, #664]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00b      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bbc:	4ba3      	ldr	r3, [pc, #652]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 030c 	and.w	r3, r3, #12
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d172      	bne.n	8002cae <HAL_RCC_OscConfig+0x44a>
 8002bc8:	4ba0      	ldr	r3, [pc, #640]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d16c      	bne.n	8002cae <HAL_RCC_OscConfig+0x44a>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002be6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_RCC_OscConfig+0x3a0>
 8002bfe:	4b93      	ldr	r3, [pc, #588]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e013      	b.n	8002c2c <HAL_RCC_OscConfig+0x3c8>
 8002c04:	2302      	movs	r3, #2
 8002c06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002c0e:	fa93 f3a3 	rbit	r3, r3
 8002c12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c16:	2302      	movs	r3, #2
 8002c18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002c1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c28:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	2202      	movs	r2, #2
 8002c2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002c32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002c36:	fa92 f2a2 	rbit	r2, r2
 8002c3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002c3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f002 021f 	and.w	r2, r2, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f202 	lsl.w	r2, r1, r2
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00a      	beq.n	8002c74 <HAL_RCC_OscConfig+0x410>
 8002c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f000 be2e 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c74:	4b75      	ldr	r3, [pc, #468]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	21f8      	movs	r1, #248	; 0xf8
 8002c8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002c92:	fa91 f1a1 	rbit	r1, r1
 8002c96:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002c9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002c9e:	fab1 f181 	clz	r1, r1
 8002ca2:	b2c9      	uxtb	r1, r1
 8002ca4:	408b      	lsls	r3, r1
 8002ca6:	4969      	ldr	r1, [pc, #420]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cac:	e0fd      	b.n	8002eaa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8088 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x56c>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002cd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ce0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2301      	movs	r3, #1
 8002cea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa1a 	bl	8001124 <HAL_GetTick>
 8002cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf4:	e00a      	b.n	8002d0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf6:	f7fe fa15 	bl	8001124 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d902      	bls.n	8002d0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	f000 bde2 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002d16:	fa93 f3a3 	rbit	r3, r3
 8002d1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002d1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d102      	bne.n	8002d3c <HAL_RCC_OscConfig+0x4d8>
 8002d36:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	e013      	b.n	8002d64 <HAL_RCC_OscConfig+0x500>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002d54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002d60:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2202      	movs	r2, #2
 8002d66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002d6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002d6e:	fa92 f2a2 	rbit	r2, r2
 8002d72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002d76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002d7a:	fab2 f282 	clz	r2, r2
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f042 0220 	orr.w	r2, r2, #32
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	f002 021f 	and.w	r2, r2, #31
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0af      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	21f8      	movs	r1, #248	; 0xf8
 8002dac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002db4:	fa91 f1a1 	rbit	r1, r1
 8002db8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002dbc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002dc0:	fab1 f181 	clz	r1, r1
 8002dc4:	b2c9      	uxtb	r1, r1
 8002dc6:	408b      	lsls	r3, r1
 8002dc8:	4920      	ldr	r1, [pc, #128]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
 8002dce:	e06c      	b.n	8002eaa <HAL_RCC_OscConfig+0x646>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002de2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	2300      	movs	r3, #0
 8002dfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f992 	bl	8001124 <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe f98d 	bl	8001124 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	f000 bd5a 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d104      	bne.n	8002e50 <HAL_RCC_OscConfig+0x5ec>
 8002e46:	4b01      	ldr	r3, [pc, #4]	; (8002e4c <HAL_RCC_OscConfig+0x5e8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e015      	b.n	8002e78 <HAL_RCC_OscConfig+0x614>
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	2302      	movs	r3, #2
 8002e52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002e5a:	fa93 f3a3 	rbit	r3, r3
 8002e5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002e62:	2302      	movs	r3, #2
 8002e64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002e68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002e74:	4bc8      	ldr	r3, [pc, #800]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002e7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002e82:	fa92 f2a2 	rbit	r2, r2
 8002e86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002e8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002e8e:	fab2 f282 	clz	r2, r2
 8002e92:	b2d2      	uxtb	r2, r2
 8002e94:	f042 0220 	orr.w	r2, r2, #32
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f002 021f 	and.w	r2, r2, #31
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ad      	bne.n	8002e06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 8110 	beq.w	80030e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d079      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x760>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002ee2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	4bab      	ldr	r3, [pc, #684]	; (800319c <HAL_RCC_OscConfig+0x938>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe f913 	bl	8001124 <HAL_GetTick>
 8002efe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f04:	f7fe f90e 	bl	8001124 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d902      	bls.n	8002f1a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	f000 bcdb 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f34:	2202      	movs	r2, #2
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f58:	2202      	movs	r2, #2
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002f72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f74:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 8002f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f80:	2102      	movs	r1, #2
 8002f82:	6019      	str	r1, [r3, #0]
 8002f84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f1a3 	rbit	r1, r3
 8002f92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002f9a:	6019      	str	r1, [r3, #0]
  return result;
 8002f9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0a0      	beq.n	8002f04 <HAL_RCC_OscConfig+0x6a0>
 8002fc2:	e08d      	b.n	80030e0 <HAL_RCC_OscConfig+0x87c>
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	fa93 f2a3 	rbit	r2, r3
 8002fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002fe6:	601a      	str	r2, [r3, #0]
  return result;
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ff0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b68      	ldr	r3, [pc, #416]	; (800319c <HAL_RCC_OscConfig+0x938>)
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	461a      	mov	r2, r3
 8003002:	2300      	movs	r3, #0
 8003004:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fe f88d 	bl	8001124 <HAL_GetTick>
 800300a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003010:	f7fe f888 	bl	8001124 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d902      	bls.n	8003026 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	f000 bc55 	b.w	80038d0 <HAL_RCC_OscConfig+0x106c>
 8003026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800302e:	2202      	movs	r2, #2
 8003030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003036:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003044:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8003052:	2202      	movs	r2, #2
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	fa93 f2a3 	rbit	r2, r3
 8003064:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003076:	2202      	movs	r2, #2
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800307e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	fa93 f2a3 	rbit	r2, r3
 8003088:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800308c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003090:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003092:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 8003094:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003096:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800309a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800309e:	2102      	movs	r1, #2
 80030a0:	6019      	str	r1, [r3, #0]
 80030a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f1a3 	rbit	r1, r3
 80030b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030b8:	6019      	str	r1, [r3, #0]
  return result;
 80030ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	2101      	movs	r1, #1
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d197      	bne.n	8003010 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 81a1 	beq.w	8003438 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	4a22      	ldr	r2, [pc, #136]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003112:	61d3      	str	r3, [r2, #28]
 8003114:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800311c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003120:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800312e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <HAL_RCC_OscConfig+0x93c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_RCC_OscConfig+0x93c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_RCC_OscConfig+0x93c>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fd ffe9 	bl	8001124 <HAL_GetTick>
 8003152:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003156:	e009      	b.n	800316c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003158:	f7fd ffe4 	bl	8001124 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b64      	cmp	r3, #100	; 0x64
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e3b1      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCC_OscConfig+0x93c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ef      	beq.n	8003158 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d10d      	bne.n	80031a4 <HAL_RCC_OscConfig+0x940>
 8003188:	4b03      	ldr	r3, [pc, #12]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4a02      	ldr	r2, [pc, #8]	; (8003198 <HAL_RCC_OscConfig+0x934>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	e03c      	b.n	8003210 <HAL_RCC_OscConfig+0x9ac>
 8003196:	bf00      	nop
 8003198:	40021000 	.word	0x40021000
 800319c:	10908120 	.word	0x10908120
 80031a0:	40007000 	.word	0x40007000
 80031a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x96a>
 80031b4:	4bc1      	ldr	r3, [pc, #772]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4ac0      	ldr	r2, [pc, #768]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031ba:	f023 0301 	bic.w	r3, r3, #1
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4bbe      	ldr	r3, [pc, #760]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4abd      	ldr	r2, [pc, #756]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031c6:	f023 0304 	bic.w	r3, r3, #4
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e020      	b.n	8003210 <HAL_RCC_OscConfig+0x9ac>
 80031ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x994>
 80031de:	4bb7      	ldr	r3, [pc, #732]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	4ab6      	ldr	r2, [pc, #728]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	6213      	str	r3, [r2, #32]
 80031ea:	4bb4      	ldr	r3, [pc, #720]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	4ab3      	ldr	r2, [pc, #716]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6213      	str	r3, [r2, #32]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0x9ac>
 80031f8:	4bb0      	ldr	r3, [pc, #704]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	4aaf      	ldr	r2, [pc, #700]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	6213      	str	r3, [r2, #32]
 8003204:	4bad      	ldr	r3, [pc, #692]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4aac      	ldr	r2, [pc, #688]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 800320a:	f023 0304 	bic.w	r3, r3, #4
 800320e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003210:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003214:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8081 	beq.w	8003324 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7fd ff7f 	bl	8001124 <HAL_GetTick>
 8003226:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00b      	b.n	8003244 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fd ff7a 	bl	8001124 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	f241 3288 	movw	r2, #5000	; 0x1388
 800323c:	4293      	cmp	r3, r2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e345      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
 8003244:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003248:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800324c:	2202      	movs	r2, #2
 800324e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003254:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	fa93 f2a3 	rbit	r2, r3
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003270:	2202      	movs	r2, #2
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	fa93 f2a3 	rbit	r2, r3
 8003282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003286:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800328a:	601a      	str	r2, [r3, #0]
  return result;
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003294:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0xa4c>
 80032aa:	4b84      	ldr	r3, [pc, #528]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0xa74>
 80032b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032b8:	2202      	movs	r2, #2
 80032ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	fa93 f2a3 	rbit	r2, r3
 80032ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	4b79      	ldr	r3, [pc, #484]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80032e0:	2102      	movs	r1, #2
 80032e2:	6011      	str	r1, [r2, #0]
 80032e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	fa92 f1a2 	rbit	r1, r2
 80032f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80032f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80032fa:	6011      	str	r1, [r2, #0]
  return result;
 80032fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003300:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	fab2 f282 	clz	r2, r2
 800330a:	b2d2      	uxtb	r2, r2
 800330c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	f002 021f 	and.w	r2, r2, #31
 8003316:	2101      	movs	r1, #1
 8003318:	fa01 f202 	lsl.w	r2, r1, r2
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d084      	beq.n	800322c <HAL_RCC_OscConfig+0x9c8>
 8003322:	e07f      	b.n	8003424 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003324:	f7fd fefe 	bl	8001124 <HAL_GetTick>
 8003328:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800332c:	e00b      	b.n	8003346 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332e:	f7fd fef9 	bl	8001124 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	f241 3288 	movw	r2, #5000	; 0x1388
 800333e:	4293      	cmp	r3, r2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e2c4      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
 8003346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800334e:	2202      	movs	r2, #2
 8003350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	fa93 f2a3 	rbit	r2, r3
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003372:	2202      	movs	r2, #2
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	fa93 f2a3 	rbit	r2, r3
 8003384:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003388:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800338c:	601a      	str	r2, [r3, #0]
  return result;
 800338e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003392:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003396:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003398:	fab3 f383 	clz	r3, r3
 800339c:	b2db      	uxtb	r3, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f043 0302 	orr.w	r3, r3, #2
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0xb4e>
 80033ac:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	e013      	b.n	80033da <HAL_RCC_OscConfig+0xb76>
 80033b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033ba:	2202      	movs	r2, #2
 80033bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	fa93 f2a3 	rbit	r2, r3
 80033cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80033d4:	601a      	str	r2, [r3, #0]
 80033d6:	4b39      	ldr	r3, [pc, #228]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80033e2:	2102      	movs	r1, #2
 80033e4:	6011      	str	r1, [r2, #0]
 80033e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	fa92 f1a2 	rbit	r1, r2
 80033f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80033fc:	6011      	str	r1, [r2, #0]
  return result;
 80033fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003402:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003406:	6812      	ldr	r2, [r2, #0]
 8003408:	fab2 f282 	clz	r2, r2
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	f002 021f 	and.w	r2, r2, #31
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f202 	lsl.w	r2, r1, r2
 800341e:	4013      	ands	r3, r2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d184      	bne.n	800332e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003424:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800343c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8242 	beq.w	80038ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344a:	4b1c      	ldr	r3, [pc, #112]	; (80034bc <HAL_RCC_OscConfig+0xc58>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b08      	cmp	r3, #8
 8003454:	f000 8213 	beq.w	800387e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800345c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b02      	cmp	r3, #2
 8003466:	f040 8162 	bne.w	800372e <HAL_RCC_OscConfig+0xeca>
 800346a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800346e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003472:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003476:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003478:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	fa93 f2a3 	rbit	r2, r3
 8003486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800348e:	601a      	str	r2, [r3, #0]
  return result;
 8003490:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003494:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003498:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80034a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	461a      	mov	r2, r3
 80034ac:	2300      	movs	r3, #0
 80034ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd fe38 	bl	8001124 <HAL_GetTick>
 80034b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b8:	e00c      	b.n	80034d4 <HAL_RCC_OscConfig+0xc70>
 80034ba:	bf00      	nop
 80034bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fd fe30 	bl	8001124 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e1fd      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
 80034d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fa93 f2a3 	rbit	r2, r3
 80034f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80034f8:	601a      	str	r2, [r3, #0]
  return result;
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003502:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	095b      	lsrs	r3, r3, #5
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_RCC_OscConfig+0xcba>
 8003518:	4bb0      	ldr	r3, [pc, #704]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	e027      	b.n	800356e <HAL_RCC_OscConfig+0xd0a>
 800351e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003522:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800352a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003530:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	fa93 f2a3 	rbit	r2, r3
 800353a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800354c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fa93 f2a3 	rbit	r2, r3
 8003560:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003564:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	4b9c      	ldr	r3, [pc, #624]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003572:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003576:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800357a:	6011      	str	r1, [r2, #0]
 800357c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003580:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003584:	6812      	ldr	r2, [r2, #0]
 8003586:	fa92 f1a2 	rbit	r1, r2
 800358a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800358e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003592:	6011      	str	r1, [r2, #0]
  return result;
 8003594:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003598:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800359c:	6812      	ldr	r2, [r2, #0]
 800359e:	fab2 f282 	clz	r2, r2
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	f042 0220 	orr.w	r2, r2, #32
 80035a8:	b2d2      	uxtb	r2, r2
 80035aa:	f002 021f 	and.w	r2, r2, #31
 80035ae:	2101      	movs	r1, #1
 80035b0:	fa01 f202 	lsl.w	r2, r1, r2
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d182      	bne.n	80034c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ba:	4b88      	ldr	r3, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	430b      	orrs	r3, r1
 80035dc:	497f      	ldr	r1, [pc, #508]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fa93 f2a3 	rbit	r2, r3
 80035fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003602:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003606:	601a      	str	r2, [r3, #0]
  return result;
 8003608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003610:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003612:	fab3 f383 	clz	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800361c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	461a      	mov	r2, r3
 8003624:	2301      	movs	r3, #1
 8003626:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003628:	f7fd fd7c 	bl	8001124 <HAL_GetTick>
 800362c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003630:	e009      	b.n	8003646 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003632:	f7fd fd77 	bl	8001124 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e144      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
 8003646:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800364a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800364e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003652:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	fa93 f2a3 	rbit	r2, r3
 8003662:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003666:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800366a:	601a      	str	r2, [r3, #0]
  return result;
 800366c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003670:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003674:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003676:	fab3 f383 	clz	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d102      	bne.n	8003690 <HAL_RCC_OscConfig+0xe2c>
 800368a:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e027      	b.n	80036e0 <HAL_RCC_OscConfig+0xe7c>
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003698:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800369c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	fa93 f2a3 	rbit	r2, r3
 80036ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fa93 f2a3 	rbit	r2, r3
 80036d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 80036de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80036e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80036ec:	6011      	str	r1, [r2, #0]
 80036ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80036f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	fa92 f1a2 	rbit	r1, r2
 80036fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003700:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003704:	6011      	str	r1, [r2, #0]
  return result;
 8003706:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800370a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	fab2 f282 	clz	r2, r2
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	f042 0220 	orr.w	r2, r2, #32
 800371a:	b2d2      	uxtb	r2, r2
 800371c:	f002 021f 	and.w	r2, r2, #31
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	4013      	ands	r3, r2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d082      	beq.n	8003632 <HAL_RCC_OscConfig+0xdce>
 800372c:	e0cf      	b.n	80038ce <HAL_RCC_OscConfig+0x106a>
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003736:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800373a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003740:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003752:	601a      	str	r2, [r3, #0]
  return result;
 8003754:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003758:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800375c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	fab3 f383 	clz	r3, r3
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	461a      	mov	r2, r3
 8003770:	2300      	movs	r3, #0
 8003772:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003774:	f7fd fcd6 	bl	8001124 <HAL_GetTick>
 8003778:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377c:	e009      	b.n	8003792 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7fd fcd1 	bl	8001124 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e09e      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
 8003792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003796:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800379a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	fa93 f2a3 	rbit	r2, r3
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037b6:	601a      	str	r2, [r3, #0]
  return result;
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80037c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d104      	bne.n	80037e0 <HAL_RCC_OscConfig+0xf7c>
 80037d6:	4b01      	ldr	r3, [pc, #4]	; (80037dc <HAL_RCC_OscConfig+0xf78>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	e029      	b.n	8003830 <HAL_RCC_OscConfig+0xfcc>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	fa93 f2a3 	rbit	r2, r3
 80037fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003800:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800380e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003818:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	4b2b      	ldr	r3, [pc, #172]	; (80038dc <HAL_RCC_OscConfig+0x1078>)
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003834:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003838:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800383c:	6011      	str	r1, [r2, #0]
 800383e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003842:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	fa92 f1a2 	rbit	r1, r2
 800384c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003850:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003854:	6011      	str	r1, [r2, #0]
  return result;
 8003856:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800385e:	6812      	ldr	r2, [r2, #0]
 8003860:	fab2 f282 	clz	r2, r2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	f042 0220 	orr.w	r2, r2, #32
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	f002 021f 	and.w	r2, r2, #31
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f202 	lsl.w	r2, r1, r2
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d180      	bne.n	800377e <HAL_RCC_OscConfig+0xf1a>
 800387c:	e027      	b.n	80038ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800387e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003882:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e01e      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003892:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_OscConfig+0x1078>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800389a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800389e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d10b      	bne.n	80038ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80038b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80038b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b09e      	sub	sp, #120	; 0x78
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e162      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b90      	ldr	r3, [pc, #576]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b8d      	ldr	r3, [pc, #564]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	498b      	ldr	r1, [pc, #556]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b89      	ldr	r3, [pc, #548]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e14a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d008      	beq.n	8003946 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b82      	ldr	r3, [pc, #520]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	497f      	ldr	r1, [pc, #508]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80dc 	beq.w	8003b0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d13c      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xf6>
 800395c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003960:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003964:	fa93 f3a3 	rbit	r3, r3
 8003968:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800396a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	b2db      	uxtb	r3, r3
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_RCC_ClockConfig+0xa6>
 8003980:	4b6f      	ldr	r3, [pc, #444]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	e00f      	b.n	80039a6 <HAL_RCC_ClockConfig+0xc6>
 8003986:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800398a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	667b      	str	r3, [r7, #100]	; 0x64
 8003994:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003998:	663b      	str	r3, [r7, #96]	; 0x60
 800399a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399c:	fa93 f3a3 	rbit	r3, r3
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80039ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039ae:	fa92 f2a2 	rbit	r2, r2
 80039b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80039b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80039b6:	fab2 f282 	clz	r2, r2
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	f042 0220 	orr.w	r2, r2, #32
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	f002 021f 	and.w	r2, r2, #31
 80039c6:	2101      	movs	r1, #1
 80039c8:	fa01 f202 	lsl.w	r2, r1, r2
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d17b      	bne.n	8003aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0f3      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d13c      	bne.n	8003a58 <HAL_RCC_ClockConfig+0x178>
 80039de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039e6:	fa93 f3a3 	rbit	r3, r3
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ee:	fab3 f383 	clz	r3, r3
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d102      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x128>
 8003a02:	4b4f      	ldr	r3, [pc, #316]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	e00f      	b.n	8003a28 <HAL_RCC_ClockConfig+0x148>
 8003a08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a10:	fa93 f3a3 	rbit	r3, r3
 8003a14:	647b      	str	r3, [r7, #68]	; 0x44
 8003a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	fa93 f3a3 	rbit	r3, r3
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a24:	4b46      	ldr	r3, [pc, #280]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a30:	fa92 f2a2 	rbit	r2, r2
 8003a34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	fab2 f282 	clz	r2, r2
 8003a3c:	b2d2      	uxtb	r2, r2
 8003a3e:	f042 0220 	orr.w	r2, r2, #32
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	f002 021f 	and.w	r2, r2, #31
 8003a48:	2101      	movs	r1, #1
 8003a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d13a      	bne.n	8003aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b2      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	fa93 f3a3 	rbit	r3, r3
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	fab3 f383 	clz	r3, r3
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d102      	bne.n	8003a80 <HAL_RCC_ClockConfig+0x1a0>
 8003a7a:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	e00d      	b.n	8003a9c <HAL_RCC_ClockConfig+0x1bc>
 8003a80:	2302      	movs	r3, #2
 8003a82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	fa93 f3a3 	rbit	r3, r3
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	fa93 f3a3 	rbit	r3, r3
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	4b29      	ldr	r3, [pc, #164]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	61ba      	str	r2, [r7, #24]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	fa92 f2a2 	rbit	r2, r2
 8003aa6:	617a      	str	r2, [r7, #20]
  return result;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	fab2 f282 	clz	r2, r2
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	f042 0220 	orr.w	r2, r2, #32
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	f002 021f 	and.w	r2, r2, #31
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e079      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	491a      	ldr	r1, [pc, #104]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fd fb22 	bl	8001124 <HAL_GetTick>
 8003ae0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fd fb1e 	bl	8001124 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e061      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d214      	bcs.n	8003b44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	4906      	ldr	r1, [pc, #24]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d005      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e040      	b.n	8003bbe <HAL_RCC_ClockConfig+0x2de>
 8003b3c:	40022000 	.word	0x40022000
 8003b40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b50:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	491a      	ldr	r1, [pc, #104]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d009      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	4912      	ldr	r1, [pc, #72]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b82:	f000 f829 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 8003b86:	4601      	mov	r1, r0
 8003b88:	4b0f      	ldr	r3, [pc, #60]	; (8003bc8 <HAL_RCC_ClockConfig+0x2e8>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b90:	22f0      	movs	r2, #240	; 0xf0
 8003b92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	fa92 f2a2 	rbit	r2, r2
 8003b9a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	fab2 f282 	clz	r2, r2
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	40d3      	lsrs	r3, r2
 8003ba6:	4a09      	ldr	r2, [pc, #36]	; (8003bcc <HAL_RCC_ClockConfig+0x2ec>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	fa21 f303 	lsr.w	r3, r1, r3
 8003bae:	4a08      	ldr	r2, [pc, #32]	; (8003bd0 <HAL_RCC_ClockConfig+0x2f0>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HAL_RCC_ClockConfig+0x2f4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fa70 	bl	800109c <HAL_InitTick>
  
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3778      	adds	r7, #120	; 0x78
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	08006d54 	.word	0x08006d54
 8003bd0:	20000074 	.word	0x20000074
 8003bd4:	20000078 	.word	0x20000078

08003bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b08b      	sub	sp, #44	; 0x2c
 8003bdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003bf2:	4b29      	ldr	r3, [pc, #164]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d002      	beq.n	8003c08 <HAL_RCC_GetSysClockFreq+0x30>
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d003      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x36>
 8003c06:	e03c      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c08:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c0a:	623b      	str	r3, [r7, #32]
      break;
 8003c0c:	e03c      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003c14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003c18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	fa92 f2a2 	rbit	r2, r2
 8003c20:	607a      	str	r2, [r7, #4]
  return result;
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	fab2 f282 	clz	r2, r2
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	40d3      	lsrs	r3, r2
 8003c2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	220f      	movs	r2, #15
 8003c3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	fa92 f2a2 	rbit	r2, r2
 8003c44:	60fa      	str	r2, [r7, #12]
  return result;
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	fab2 f282 	clz	r2, r2
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	40d3      	lsrs	r3, r2
 8003c50:	4a14      	ldr	r2, [pc, #80]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c52:	5cd3      	ldrb	r3, [r2, r3]
 8003c54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003c60:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c70:	e004      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4a0c      	ldr	r2, [pc, #48]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003c76:	fb02 f303 	mul.w	r3, r2, r3
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	623b      	str	r3, [r7, #32]
      break;
 8003c80:	e002      	b.n	8003c88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003c84:	623b      	str	r3, [r7, #32]
      break;
 8003c86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	372c      	adds	r7, #44	; 0x2c
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	007a1200 	.word	0x007a1200
 8003ca0:	08006d6c 	.word	0x08006d6c
 8003ca4:	08006d7c 	.word	0x08006d7c
 8003ca8:	003d0900 	.word	0x003d0900

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000074 	.word	0x20000074

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003cca:	f7ff ffef 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cce:	4601      	mov	r1, r0
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003cd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003cdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	fa92 f2a2 	rbit	r2, r2
 8003ce4:	603a      	str	r2, [r7, #0]
  return result;
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	fab2 f282 	clz	r2, r2
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	40d3      	lsrs	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003cf2:	5cd3      	ldrb	r3, [r2, r3]
 8003cf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	08006d64 	.word	0x08006d64

08003d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003d0e:	f7ff ffcd 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003d12:	4601      	mov	r1, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003d1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003d20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	fa92 f2a2 	rbit	r2, r2
 8003d28:	603a      	str	r2, [r7, #0]
  return result;
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	fab2 f282 	clz	r2, r2
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	40d3      	lsrs	r3, r2
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003d36:	5cd3      	ldrb	r3, [r2, r3]
 8003d38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40021000 	.word	0x40021000
 8003d48:	08006d64 	.word	0x08006d64

08003d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b092      	sub	sp, #72	; 0x48
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80cd 	beq.w	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d70:	4b86      	ldr	r3, [pc, #536]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	4b83      	ldr	r3, [pc, #524]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	4a82      	ldr	r2, [pc, #520]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	61d3      	str	r3, [r2, #28]
 8003d88:	4b80      	ldr	r3, [pc, #512]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d118      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a79      	ldr	r2, [pc, #484]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db2:	f7fd f9b7 	bl	8001124 <HAL_GetTick>
 8003db6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	e008      	b.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dba:	f7fd f9b3 	bl	8001124 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b64      	cmp	r3, #100	; 0x64
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e0db      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	4b70      	ldr	r3, [pc, #448]	; (8003f90 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0f0      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d07d      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d076      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003df6:	4b65      	ldr	r3, [pc, #404]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e10:	fab3 f383 	clz	r3, r3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2301      	movs	r3, #1
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	fa93 f3a3 	rbit	r3, r3
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e34:	fab3 f383 	clz	r3, r3
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	4b55      	ldr	r3, [pc, #340]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	461a      	mov	r2, r3
 8003e44:	2300      	movs	r3, #0
 8003e46:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e48:	4a50      	ldr	r2, [pc, #320]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d045      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7fd f964 	bl	8001124 <HAL_GetTick>
 8003e5c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	e00a      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd f960 	bl	8001124 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e086      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003e76:	2302      	movs	r3, #2
 8003e78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	fa93 f3a3 	rbit	r3, r3
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
 8003e82:	2302      	movs	r3, #2
 8003e84:	623b      	str	r3, [r7, #32]
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	fa93 f3a3 	rbit	r3, r3
 8003e8c:	61fb      	str	r3, [r7, #28]
  return result;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e90:	fab3 f383 	clz	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d102      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	e007      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	4b35      	ldr	r3, [pc, #212]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2202      	movs	r2, #2
 8003ebc:	613a      	str	r2, [r7, #16]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	fa92 f2a2 	rbit	r2, r2
 8003ec4:	60fa      	str	r2, [r7, #12]
  return result;
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	fab2 f282 	clz	r2, r2
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	f002 021f 	and.w	r2, r2, #31
 8003ed8:	2101      	movs	r1, #1
 8003eda:	fa01 f202 	lsl.w	r2, r1, r2
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0bd      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003ee4:	4b29      	ldr	r3, [pc, #164]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4926      	ldr	r1, [pc, #152]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ef6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d105      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efe:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	4a22      	ldr	r2, [pc, #136]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f08:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d008      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f16:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f023 0203 	bic.w	r2, r3, #3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	491a      	ldr	r1, [pc, #104]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f34:	4b15      	ldr	r3, [pc, #84]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f023 0210 	bic.w	r2, r3, #16
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4912      	ldr	r1, [pc, #72]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d008      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	490b      	ldr	r1, [pc, #44]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	4903      	ldr	r1, [pc, #12]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3748      	adds	r7, #72	; 0x48
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40007000 	.word	0x40007000
 8003f94:	10908100 	.word	0x10908100

08003f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e049      	b.n	800403e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7fc feca 	bl	8000d58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 fb60 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e049      	b.n	80040ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f841 	bl	80040f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f000 fb09 	bl	800469c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_TIM_PWM_Start+0x24>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	e03c      	b.n	80041a6 <HAL_TIM_PWM_Start+0x9e>
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2b04      	cmp	r3, #4
 8004130:	d109      	bne.n	8004146 <HAL_TIM_PWM_Start+0x3e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b01      	cmp	r3, #1
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	e02f      	b.n	80041a6 <HAL_TIM_PWM_Start+0x9e>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d109      	bne.n	8004160 <HAL_TIM_PWM_Start+0x58>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b01      	cmp	r3, #1
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e022      	b.n	80041a6 <HAL_TIM_PWM_Start+0x9e>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d109      	bne.n	800417a <HAL_TIM_PWM_Start+0x72>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	e015      	b.n	80041a6 <HAL_TIM_PWM_Start+0x9e>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b10      	cmp	r3, #16
 800417e:	d109      	bne.n	8004194 <HAL_TIM_PWM_Start+0x8c>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b01      	cmp	r3, #1
 800418a:	bf14      	ite	ne
 800418c:	2301      	movne	r3, #1
 800418e:	2300      	moveq	r3, #0
 8004190:	b2db      	uxtb	r3, r3
 8004192:	e008      	b.n	80041a6 <HAL_TIM_PWM_Start+0x9e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	bf14      	ite	ne
 80041a0:	2301      	movne	r3, #1
 80041a2:	2300      	moveq	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e088      	b.n	80042c0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_TIM_PWM_Start+0xb6>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041bc:	e023      	b.n	8004206 <HAL_TIM_PWM_Start+0xfe>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d104      	bne.n	80041ce <HAL_TIM_PWM_Start+0xc6>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041cc:	e01b      	b.n	8004206 <HAL_TIM_PWM_Start+0xfe>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d104      	bne.n	80041de <HAL_TIM_PWM_Start+0xd6>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041dc:	e013      	b.n	8004206 <HAL_TIM_PWM_Start+0xfe>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	2b0c      	cmp	r3, #12
 80041e2:	d104      	bne.n	80041ee <HAL_TIM_PWM_Start+0xe6>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041ec:	e00b      	b.n	8004206 <HAL_TIM_PWM_Start+0xfe>
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0xf6>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041fc:	e003      	b.n	8004206 <HAL_TIM_PWM_Start+0xfe>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2201      	movs	r2, #1
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fdfc 	bl	8004e0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a2b      	ldr	r2, [pc, #172]	; (80042c8 <HAL_TIM_PWM_Start+0x1c0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_TIM_PWM_Start+0x134>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <HAL_TIM_PWM_Start+0x1c4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_TIM_PWM_Start+0x134>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a28      	ldr	r2, [pc, #160]	; (80042d0 <HAL_TIM_PWM_Start+0x1c8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_TIM_PWM_Start+0x134>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <HAL_TIM_PWM_Start+0x1cc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_TIM_PWM_Start+0x138>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_TIM_PWM_Start+0x13a>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d007      	beq.n	8004256 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004254:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_TIM_PWM_Start+0x1c0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00e      	beq.n	800427e <HAL_TIM_PWM_Start+0x176>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d009      	beq.n	800427e <HAL_TIM_PWM_Start+0x176>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <HAL_TIM_PWM_Start+0x1d0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_TIM_PWM_Start+0x176>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a14      	ldr	r2, [pc, #80]	; (80042cc <HAL_TIM_PWM_Start+0x1c4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d115      	bne.n	80042aa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	4b15      	ldr	r3, [pc, #84]	; (80042dc <HAL_TIM_PWM_Start+0x1d4>)
 8004286:	4013      	ands	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2b06      	cmp	r3, #6
 800428e:	d015      	beq.n	80042bc <HAL_TIM_PWM_Start+0x1b4>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004296:	d011      	beq.n	80042bc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	e008      	b.n	80042bc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e000      	b.n	80042be <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40012c00 	.word	0x40012c00
 80042cc:	40014000 	.word	0x40014000
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800
 80042d8:	40000400 	.word	0x40000400
 80042dc:	00010007 	.word	0x00010007

080042e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0ff      	b.n	80044fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b14      	cmp	r3, #20
 800430a:	f200 80f0 	bhi.w	80044ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004369 	.word	0x08004369
 8004318:	080044ef 	.word	0x080044ef
 800431c:	080044ef 	.word	0x080044ef
 8004320:	080044ef 	.word	0x080044ef
 8004324:	080043a9 	.word	0x080043a9
 8004328:	080044ef 	.word	0x080044ef
 800432c:	080044ef 	.word	0x080044ef
 8004330:	080044ef 	.word	0x080044ef
 8004334:	080043eb 	.word	0x080043eb
 8004338:	080044ef 	.word	0x080044ef
 800433c:	080044ef 	.word	0x080044ef
 8004340:	080044ef 	.word	0x080044ef
 8004344:	0800442b 	.word	0x0800442b
 8004348:	080044ef 	.word	0x080044ef
 800434c:	080044ef 	.word	0x080044ef
 8004350:	080044ef 	.word	0x080044ef
 8004354:	0800446d 	.word	0x0800446d
 8004358:	080044ef 	.word	0x080044ef
 800435c:	080044ef 	.word	0x080044ef
 8004360:	080044ef 	.word	0x080044ef
 8004364:	080044ad 	.word	0x080044ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68b9      	ldr	r1, [r7, #8]
 800436e:	4618      	mov	r0, r3
 8004370:	f000 fa0c 	bl	800478c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	699a      	ldr	r2, [r3, #24]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0208 	orr.w	r2, r2, #8
 8004382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0204 	bic.w	r2, r2, #4
 8004392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6999      	ldr	r1, [r3, #24]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	619a      	str	r2, [r3, #24]
      break;
 80043a6:	e0a5      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fa72 	bl	8004898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6999      	ldr	r1, [r3, #24]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	021a      	lsls	r2, r3, #8
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	430a      	orrs	r2, r1
 80043e6:	619a      	str	r2, [r3, #24]
      break;
 80043e8:	e084      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fad1 	bl	8004998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f042 0208 	orr.w	r2, r2, #8
 8004404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 0204 	bic.w	r2, r2, #4
 8004414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
      break;
 8004428:	e064      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fb2f 	bl	8004a94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	021a      	lsls	r2, r3, #8
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	61da      	str	r2, [r3, #28]
      break;
 800446a:	e043      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 fb72 	bl	8004b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0208 	orr.w	r2, r2, #8
 8004486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0204 	bic.w	r2, r2, #4
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044aa:	e023      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fbb0 	bl	8004c18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	021a      	lsls	r2, r3, #8
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80044ec:	e002      	b.n	80044f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	75fb      	strb	r3, [r7, #23]
      break;
 80044f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop

08004508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800451c:	2b01      	cmp	r3, #1
 800451e:	d101      	bne.n	8004524 <HAL_TIM_ConfigClockSource+0x1c>
 8004520:	2302      	movs	r3, #2
 8004522:	e0b6      	b.n	8004692 <HAL_TIM_ConfigClockSource+0x18a>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004542:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800454e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004560:	d03e      	beq.n	80045e0 <HAL_TIM_ConfigClockSource+0xd8>
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004566:	f200 8087 	bhi.w	8004678 <HAL_TIM_ConfigClockSource+0x170>
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	f000 8086 	beq.w	800467e <HAL_TIM_ConfigClockSource+0x176>
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d87f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004578:	2b70      	cmp	r3, #112	; 0x70
 800457a:	d01a      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xaa>
 800457c:	2b70      	cmp	r3, #112	; 0x70
 800457e:	d87b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004580:	2b60      	cmp	r3, #96	; 0x60
 8004582:	d050      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0x11e>
 8004584:	2b60      	cmp	r3, #96	; 0x60
 8004586:	d877      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004588:	2b50      	cmp	r3, #80	; 0x50
 800458a:	d03c      	beq.n	8004606 <HAL_TIM_ConfigClockSource+0xfe>
 800458c:	2b50      	cmp	r3, #80	; 0x50
 800458e:	d873      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004590:	2b40      	cmp	r3, #64	; 0x40
 8004592:	d058      	beq.n	8004646 <HAL_TIM_ConfigClockSource+0x13e>
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d86f      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 8004598:	2b30      	cmp	r3, #48	; 0x30
 800459a:	d064      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d86b      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 80045a0:	2b20      	cmp	r3, #32
 80045a2:	d060      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 80045a4:	2b20      	cmp	r3, #32
 80045a6:	d867      	bhi.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d05c      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d05a      	beq.n	8004666 <HAL_TIM_ConfigClockSource+0x15e>
 80045b0:	e062      	b.n	8004678 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c2:	f000 fc03 	bl	8004dcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
      break;
 80045de:	e04f      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045f0:	f000 fbec 	bl	8004dcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004602:	609a      	str	r2, [r3, #8]
      break;
 8004604:	e03c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004612:	461a      	mov	r2, r3
 8004614:	f000 fb60 	bl	8004cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2150      	movs	r1, #80	; 0x50
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fbb9 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004624:	e02c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004632:	461a      	mov	r2, r3
 8004634:	f000 fb7f 	bl	8004d36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2160      	movs	r1, #96	; 0x60
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fba9 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004644:	e01c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004652:	461a      	mov	r2, r3
 8004654:	f000 fb40 	bl	8004cd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2140      	movs	r1, #64	; 0x40
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fb99 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004664:	e00c      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fb90 	bl	8004d96 <TIM_ITRx_SetConfig>
      break;
 8004676:	e003      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e000      	b.n	8004680 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800467e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004690:	7bfb      	ldrb	r3, [r7, #15]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a32      	ldr	r2, [pc, #200]	; (8004778 <TIM_Base_SetConfig+0xdc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <TIM_Base_SetConfig+0x28>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ba:	d003      	beq.n	80046c4 <TIM_Base_SetConfig+0x28>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a2f      	ldr	r2, [pc, #188]	; (800477c <TIM_Base_SetConfig+0xe0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d108      	bne.n	80046d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a27      	ldr	r2, [pc, #156]	; (8004778 <TIM_Base_SetConfig+0xdc>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_Base_SetConfig+0x6a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e4:	d00f      	beq.n	8004706 <TIM_Base_SetConfig+0x6a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a24      	ldr	r2, [pc, #144]	; (800477c <TIM_Base_SetConfig+0xe0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0x6a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a23      	ldr	r2, [pc, #140]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0x6a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0x6a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a21      	ldr	r2, [pc, #132]	; (8004788 <TIM_Base_SetConfig+0xec>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a0e      	ldr	r2, [pc, #56]	; (8004778 <TIM_Base_SetConfig+0xdc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00b      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <TIM_Base_SetConfig+0xe4>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d007      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <TIM_Base_SetConfig+0xe8>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d003      	beq.n	800475c <TIM_Base_SetConfig+0xc0>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a0c      	ldr	r2, [pc, #48]	; (8004788 <TIM_Base_SetConfig+0xec>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d103      	bne.n	8004764 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	615a      	str	r2, [r3, #20]
}
 800476a:	bf00      	nop
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40000400 	.word	0x40000400
 8004780:	40014000 	.word	0x40014000
 8004784:	40014400 	.word	0x40014400
 8004788:	40014800 	.word	0x40014800

0800478c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0201 	bic.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f023 0302 	bic.w	r3, r3, #2
 80047d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a28      	ldr	r2, [pc, #160]	; (8004888 <TIM_OC1_SetConfig+0xfc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00b      	beq.n	8004804 <TIM_OC1_SetConfig+0x78>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a27      	ldr	r2, [pc, #156]	; (800488c <TIM_OC1_SetConfig+0x100>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d007      	beq.n	8004804 <TIM_OC1_SetConfig+0x78>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a26      	ldr	r2, [pc, #152]	; (8004890 <TIM_OC1_SetConfig+0x104>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d003      	beq.n	8004804 <TIM_OC1_SetConfig+0x78>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a25      	ldr	r2, [pc, #148]	; (8004894 <TIM_OC1_SetConfig+0x108>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d10c      	bne.n	800481e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f023 0308 	bic.w	r3, r3, #8
 800480a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a19      	ldr	r2, [pc, #100]	; (8004888 <TIM_OC1_SetConfig+0xfc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_OC1_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a18      	ldr	r2, [pc, #96]	; (800488c <TIM_OC1_SetConfig+0x100>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_OC1_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <TIM_OC1_SetConfig+0x104>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_OC1_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a16      	ldr	r2, [pc, #88]	; (8004894 <TIM_OC1_SetConfig+0x108>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d111      	bne.n	8004862 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800484c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40014000 	.word	0x40014000
 8004890:	40014400 	.word	0x40014400
 8004894:	40014800 	.word	0x40014800

08004898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004898:	b480      	push	{r7}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	f023 0210 	bic.w	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0320 	bic.w	r3, r3, #32
 80048e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a24      	ldr	r2, [pc, #144]	; (8004988 <TIM_OC2_SetConfig+0xf0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d10d      	bne.n	8004918 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004902:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	4313      	orrs	r3, r2
 800490e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004916:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a1b      	ldr	r2, [pc, #108]	; (8004988 <TIM_OC2_SetConfig+0xf0>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d00b      	beq.n	8004938 <TIM_OC2_SetConfig+0xa0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a1a      	ldr	r2, [pc, #104]	; (800498c <TIM_OC2_SetConfig+0xf4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d007      	beq.n	8004938 <TIM_OC2_SetConfig+0xa0>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a19      	ldr	r2, [pc, #100]	; (8004990 <TIM_OC2_SetConfig+0xf8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d003      	beq.n	8004938 <TIM_OC2_SetConfig+0xa0>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a18      	ldr	r2, [pc, #96]	; (8004994 <TIM_OC2_SetConfig+0xfc>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d113      	bne.n	8004960 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800493e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004946:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800

08004998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	697a      	ldr	r2, [r7, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <TIM_OC3_SetConfig+0xec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10d      	bne.n	8004a16 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	021b      	lsls	r3, r3, #8
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a14:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <TIM_OC3_SetConfig+0xec>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_OC3_SetConfig+0x9e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <TIM_OC3_SetConfig+0xf0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_OC3_SetConfig+0x9e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <TIM_OC3_SetConfig+0xf4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC3_SetConfig+0x9e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a17      	ldr	r2, [pc, #92]	; (8004a90 <TIM_OC3_SetConfig+0xf8>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d113      	bne.n	8004a5e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	011b      	lsls	r3, r3, #4
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	621a      	str	r2, [r3, #32]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800

08004a94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69db      	ldr	r3, [r3, #28]
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	031b      	lsls	r3, r3, #12
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a16      	ldr	r2, [pc, #88]	; (8004b4c <TIM_OC4_SetConfig+0xb8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00b      	beq.n	8004b10 <TIM_OC4_SetConfig+0x7c>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <TIM_OC4_SetConfig+0xbc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d007      	beq.n	8004b10 <TIM_OC4_SetConfig+0x7c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a14      	ldr	r2, [pc, #80]	; (8004b54 <TIM_OC4_SetConfig+0xc0>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d003      	beq.n	8004b10 <TIM_OC4_SetConfig+0x7c>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <TIM_OC4_SetConfig+0xc4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d109      	bne.n	8004b24 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	019b      	lsls	r3, r3, #6
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	621a      	str	r2, [r3, #32]
}
 8004b3e:	bf00      	nop
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400
 8004b58:	40014800 	.word	0x40014800

08004b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b087      	sub	sp, #28
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a15      	ldr	r2, [pc, #84]	; (8004c08 <TIM_OC5_SetConfig+0xac>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d00b      	beq.n	8004bce <TIM_OC5_SetConfig+0x72>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <TIM_OC5_SetConfig+0xb0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d007      	beq.n	8004bce <TIM_OC5_SetConfig+0x72>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <TIM_OC5_SetConfig+0xb4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d003      	beq.n	8004bce <TIM_OC5_SetConfig+0x72>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <TIM_OC5_SetConfig+0xb8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d109      	bne.n	8004be2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	40012c00 	.word	0x40012c00
 8004c0c:	40014000 	.word	0x40014000
 8004c10:	40014400 	.word	0x40014400
 8004c14:	40014800 	.word	0x40014800

08004c18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	021b      	lsls	r3, r3, #8
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	051b      	lsls	r3, r3, #20
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a16      	ldr	r2, [pc, #88]	; (8004cc8 <TIM_OC6_SetConfig+0xb0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_OC6_SetConfig+0x74>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <TIM_OC6_SetConfig+0xb4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_OC6_SetConfig+0x74>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <TIM_OC6_SetConfig+0xb8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_OC6_SetConfig+0x74>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <TIM_OC6_SetConfig+0xbc>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d109      	bne.n	8004ca0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a1b      	ldr	r3, [r3, #32]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f023 030a 	bic.w	r3, r3, #10
 8004d14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b087      	sub	sp, #28
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	f023 0210 	bic.w	r2, r3, #16
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	031b      	lsls	r3, r3, #12
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f043 0307 	orr.w	r3, r3, #7
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004de6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	609a      	str	r2, [r3, #8]
}
 8004e00:	bf00      	nop
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b087      	sub	sp, #28
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f003 031f 	and.w	r3, r3, #31
 8004e1e:	2201      	movs	r2, #1
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1a      	ldr	r2, [r3, #32]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	401a      	ands	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f003 031f 	and.w	r3, r3, #31
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	fa01 f303 	lsl.w	r3, r1, r3
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e054      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a24      	ldr	r2, [pc, #144]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d108      	bne.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ea0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a17      	ldr	r2, [pc, #92]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a13      	ldr	r2, [pc, #76]	; (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40000400 	.word	0x40000400
 8004f30:	40014000 	.word	0x40014000

08004f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e040      	b.n	8004fc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7fb ff98 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2224      	movs	r2, #36	; 0x24
 8004f60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f022 0201 	bic.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fc00 	bl	8005778 <UART_SetConfig>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e022      	b.n	8004fc8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fd2a 	bl	80059e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689a      	ldr	r2, [r3, #8]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 0201 	orr.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fdb1 	bl	8005b28 <UART_CheckIdleState>
 8004fc6:	4603      	mov	r3, r0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe4:	2b20      	cmp	r3, #32
 8004fe6:	d178      	bne.n	80050da <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <HAL_UART_Transmit+0x24>
 8004fee:	88fb      	ldrh	r3, [r7, #6]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e071      	b.n	80050dc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2221      	movs	r2, #33	; 0x21
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005006:	f7fc f88d 	bl	8001124 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005024:	d108      	bne.n	8005038 <HAL_UART_Transmit+0x68>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	e003      	b.n	8005040 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005040:	e030      	b.n	80050a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2180      	movs	r1, #128	; 0x80
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fe13 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d004      	beq.n	8005062 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e03c      	b.n	80050dc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	881a      	ldrh	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005074:	b292      	uxth	r2, r2
 8005076:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	3302      	adds	r3, #2
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e008      	b.n	8005092 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	b292      	uxth	r2, r2
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3301      	adds	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1c8      	bne.n	8005042 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2140      	movs	r1, #64	; 0x40
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fddc 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e005      	b.n	80050dc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2220      	movs	r2, #32
 80050d4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	; 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d132      	bne.n	8005162 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d002      	beq.n	8005108 <HAL_UART_Receive_IT+0x24>
 8005102:	88fb      	ldrh	r3, [r7, #6]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e02b      	b.n	8005164 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2200      	movs	r2, #0
 8005110:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d018      	beq.n	8005152 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	613b      	str	r3, [r7, #16]
   return(result);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	623b      	str	r3, [r7, #32]
 8005140:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	69f9      	ldr	r1, [r7, #28]
 8005144:	6a3a      	ldr	r2, [r7, #32]
 8005146:	e841 2300 	strex	r3, r2, [r1]
 800514a:	61bb      	str	r3, [r7, #24]
   return(result);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1e6      	bne.n	8005120 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	461a      	mov	r2, r3
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fdf5 	bl	8005d48 <UART_Start_Receive_IT>
 800515e:	4603      	mov	r3, r0
 8005160:	e000      	b.n	8005164 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8005162:	2302      	movs	r3, #2
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0ba      	sub	sp, #232	; 0xe8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005192:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005196:	f640 030f 	movw	r3, #2063	; 0x80f
 800519a:	4013      	ands	r3, r2
 800519c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d115      	bne.n	80051d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00f      	beq.n	80051d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d009      	beq.n	80051d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f000 82ab 	beq.w	8005720 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	4798      	blx	r3
      }
      return;
 80051d2:	e2a5      	b.n	8005720 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 8117 	beq.w	800540c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d106      	bne.n	80051f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051ee:	4b85      	ldr	r3, [pc, #532]	; (8005404 <HAL_UART_IRQHandler+0x298>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 810a 	beq.w	800540c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fc:	f003 0301 	and.w	r3, r3, #1
 8005200:	2b00      	cmp	r3, #0
 8005202:	d011      	beq.n	8005228 <HAL_UART_IRQHandler+0xbc>
 8005204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521e:	f043 0201 	orr.w	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <HAL_UART_IRQHandler+0xec>
 8005234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2202      	movs	r2, #2
 8005246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524e:	f043 0204 	orr.w	r2, r3, #4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d011      	beq.n	8005288 <HAL_UART_IRQHandler+0x11c>
 8005264:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00b      	beq.n	8005288 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2204      	movs	r2, #4
 8005276:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527e:	f043 0202 	orr.w	r2, r3, #2
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528c:	f003 0308 	and.w	r3, r3, #8
 8005290:	2b00      	cmp	r3, #0
 8005292:	d017      	beq.n	80052c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2208      	movs	r2, #8
 80052b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	f043 0208 	orr.w	r2, r3, #8
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d012      	beq.n	80052f6 <HAL_UART_IRQHandler+0x18a>
 80052d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00c      	beq.n	80052f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	f000 8211 	beq.w	8005724 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005306:	f003 0320 	and.w	r3, r3, #32
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00d      	beq.n	800532a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800530e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005330:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d005      	beq.n	800534e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005342:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005346:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800534a:	2b00      	cmp	r3, #0
 800534c:	d04f      	beq.n	80053ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fdc0 	bl	8005ed4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d141      	bne.n	80053e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005370:	e853 3f00 	ldrex	r3, [r3]
 8005374:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005378:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800537c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	3308      	adds	r3, #8
 800538a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800538e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005392:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800539a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d1d9      	bne.n	8005362 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ba:	4a13      	ldr	r2, [pc, #76]	; (8005408 <HAL_UART_IRQHandler+0x29c>)
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fd f886 	bl	80024d4 <HAL_DMA_Abort_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d017      	beq.n	80053fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053d8:	4610      	mov	r0, r2
 80053da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	e00f      	b.n	80053fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f9b4 	bl	800574c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	e00b      	b.n	80053fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f9b0 	bl	800574c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	e007      	b.n	80053fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9ac 	bl	800574c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80053fc:	e192      	b.n	8005724 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fe:	bf00      	nop
    return;
 8005400:	e190      	b.n	8005724 <HAL_UART_IRQHandler+0x5b8>
 8005402:	bf00      	nop
 8005404:	04000120 	.word	0x04000120
 8005408:	08005f9d 	.word	0x08005f9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 814b 	bne.w	80056ac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 8144 	beq.w	80056ac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 813d 	beq.w	80056ac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2210      	movs	r2, #16
 8005438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	f040 80b5 	bne.w	80055b4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005456:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8164 	beq.w	8005728 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005466:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800546a:	429a      	cmp	r2, r3
 800546c:	f080 815c 	bcs.w	8005728 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005476:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	2b20      	cmp	r3, #32
 8005482:	f000 8086 	beq.w	8005592 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005492:	e853 3f00 	ldrex	r3, [r3]
 8005496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800549a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800549e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1da      	bne.n	8005486 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3308      	adds	r3, #8
 80054d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3308      	adds	r3, #8
 80054f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e1      	bne.n	80054d0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3308      	adds	r3, #8
 8005512:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800551c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800551e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005530:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005532:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005534:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005536:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005538:	e841 2300 	strex	r3, r2, [r1]
 800553c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800553e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1e3      	bne.n	800550c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005562:	f023 0310 	bic.w	r3, r3, #16
 8005566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005574:	65bb      	str	r3, [r7, #88]	; 0x58
 8005576:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800557a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e4      	bne.n	8005552 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558c:	4618      	mov	r0, r3
 800558e:	f7fc ff68 	bl	8002462 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2202      	movs	r2, #2
 8005596:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f8d7 	bl	8005760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055b2:	e0b9      	b.n	8005728 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80ab 	beq.w	800572c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80055d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055da:	2b00      	cmp	r3, #0
 80055dc:	f000 80a6 	beq.w	800572c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	e853 3f00 	ldrex	r3, [r3]
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	461a      	mov	r2, r3
 80055fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
 8005604:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e4      	bne.n	80055e0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3308      	adds	r3, #8
 800561c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	e853 3f00 	ldrex	r3, [r3]
 8005624:	623b      	str	r3, [r7, #32]
   return(result);
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	3308      	adds	r3, #8
 8005636:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800563a:	633a      	str	r2, [r7, #48]	; 0x30
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800563e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005642:	e841 2300 	strex	r3, r2, [r1]
 8005646:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1e3      	bne.n	8005616 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2220      	movs	r2, #32
 8005652:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0310 	bic.w	r3, r3, #16
 8005676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005684:	61fb      	str	r3, [r7, #28]
 8005686:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69b9      	ldr	r1, [r7, #24]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	617b      	str	r3, [r7, #20]
   return(result);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e4      	bne.n	8005662 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2202      	movs	r2, #2
 800569c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800569e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f85b 	bl	8005760 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056aa:	e03f      	b.n	800572c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <HAL_UART_IRQHandler+0x56a>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d008      	beq.n	80056d6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fe4c 	bl	800636c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056d4:	e02d      	b.n	8005732 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00e      	beq.n	8005700 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01c      	beq.n	8005730 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
    }
    return;
 80056fe:	e017      	b.n	8005730 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d012      	beq.n	8005732 <HAL_UART_IRQHandler+0x5c6>
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00c      	beq.n	8005732 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 fc55 	bl	8005fc8 <UART_EndTransmit_IT>
    return;
 800571e:	e008      	b.n	8005732 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005720:	bf00      	nop
 8005722:	e006      	b.n	8005732 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005724:	bf00      	nop
 8005726:	e004      	b.n	8005732 <HAL_UART_IRQHandler+0x5c6>
      return;
 8005728:	bf00      	nop
 800572a:	e002      	b.n	8005732 <HAL_UART_IRQHandler+0x5c6>
      return;
 800572c:	bf00      	nop
 800572e:	e000      	b.n	8005732 <HAL_UART_IRQHandler+0x5c6>
    return;
 8005730:	bf00      	nop
  }

}
 8005732:	37e8      	adds	r7, #232	; 0xe8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b8a      	ldr	r3, [pc, #552]	; (80059cc <UART_SetConfig+0x254>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	6979      	ldr	r1, [r7, #20]
 80057ac:	430b      	orrs	r3, r1
 80057ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a78      	ldr	r2, [pc, #480]	; (80059d0 <UART_SetConfig+0x258>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d120      	bne.n	8005836 <UART_SetConfig+0xbe>
 80057f4:	4b77      	ldr	r3, [pc, #476]	; (80059d4 <UART_SetConfig+0x25c>)
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d817      	bhi.n	8005830 <UART_SetConfig+0xb8>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x90>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	08005819 	.word	0x08005819
 800580c:	08005825 	.word	0x08005825
 8005810:	0800582b 	.word	0x0800582b
 8005814:	0800581f 	.word	0x0800581f
 8005818:	2300      	movs	r3, #0
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e01d      	b.n	800585a <UART_SetConfig+0xe2>
 800581e:	2302      	movs	r3, #2
 8005820:	77fb      	strb	r3, [r7, #31]
 8005822:	e01a      	b.n	800585a <UART_SetConfig+0xe2>
 8005824:	2304      	movs	r3, #4
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e017      	b.n	800585a <UART_SetConfig+0xe2>
 800582a:	2308      	movs	r3, #8
 800582c:	77fb      	strb	r3, [r7, #31]
 800582e:	e014      	b.n	800585a <UART_SetConfig+0xe2>
 8005830:	2310      	movs	r3, #16
 8005832:	77fb      	strb	r3, [r7, #31]
 8005834:	e011      	b.n	800585a <UART_SetConfig+0xe2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a67      	ldr	r2, [pc, #412]	; (80059d8 <UART_SetConfig+0x260>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d102      	bne.n	8005846 <UART_SetConfig+0xce>
 8005840:	2300      	movs	r3, #0
 8005842:	77fb      	strb	r3, [r7, #31]
 8005844:	e009      	b.n	800585a <UART_SetConfig+0xe2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a64      	ldr	r2, [pc, #400]	; (80059dc <UART_SetConfig+0x264>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d102      	bne.n	8005856 <UART_SetConfig+0xde>
 8005850:	2300      	movs	r3, #0
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e001      	b.n	800585a <UART_SetConfig+0xe2>
 8005856:	2310      	movs	r3, #16
 8005858:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005862:	d15a      	bne.n	800591a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8005864:	7ffb      	ldrb	r3, [r7, #31]
 8005866:	2b08      	cmp	r3, #8
 8005868:	d827      	bhi.n	80058ba <UART_SetConfig+0x142>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0xf8>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005895 	.word	0x08005895
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058a5 	.word	0x080058a5
 800587c:	080058bb 	.word	0x080058bb
 8005880:	080058ab 	.word	0x080058ab
 8005884:	080058bb 	.word	0x080058bb
 8005888:	080058bb 	.word	0x080058bb
 800588c:	080058bb 	.word	0x080058bb
 8005890:	080058b3 	.word	0x080058b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005894:	f7fe fa16 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8005898:	61b8      	str	r0, [r7, #24]
        break;
 800589a:	e013      	b.n	80058c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800589c:	f7fe fa34 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 80058a0:	61b8      	str	r0, [r7, #24]
        break;
 80058a2:	e00f      	b.n	80058c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a4:	4b4e      	ldr	r3, [pc, #312]	; (80059e0 <UART_SetConfig+0x268>)
 80058a6:	61bb      	str	r3, [r7, #24]
        break;
 80058a8:	e00c      	b.n	80058c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058aa:	f7fe f995 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 80058ae:	61b8      	str	r0, [r7, #24]
        break;
 80058b0:	e008      	b.n	80058c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	61bb      	str	r3, [r7, #24]
        break;
 80058b8:	e004      	b.n	80058c4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	77bb      	strb	r3, [r7, #30]
        break;
 80058c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d074      	beq.n	80059b4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	005a      	lsls	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	085b      	lsrs	r3, r3, #1
 80058d4:	441a      	add	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	fbb2 f3f3 	udiv	r3, r2, r3
 80058de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b0f      	cmp	r3, #15
 80058e4:	d916      	bls.n	8005914 <UART_SetConfig+0x19c>
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ec:	d212      	bcs.n	8005914 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	f023 030f 	bic.w	r3, r3, #15
 80058f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	085b      	lsrs	r3, r3, #1
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	b29a      	uxth	r2, r3
 8005904:	89fb      	ldrh	r3, [r7, #14]
 8005906:	4313      	orrs	r3, r2
 8005908:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	89fa      	ldrh	r2, [r7, #14]
 8005910:	60da      	str	r2, [r3, #12]
 8005912:	e04f      	b.n	80059b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	77bb      	strb	r3, [r7, #30]
 8005918:	e04c      	b.n	80059b4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800591a:	7ffb      	ldrb	r3, [r7, #31]
 800591c:	2b08      	cmp	r3, #8
 800591e:	d828      	bhi.n	8005972 <UART_SetConfig+0x1fa>
 8005920:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <UART_SetConfig+0x1b0>)
 8005922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005926:	bf00      	nop
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005955 	.word	0x08005955
 8005930:	0800595d 	.word	0x0800595d
 8005934:	08005973 	.word	0x08005973
 8005938:	08005963 	.word	0x08005963
 800593c:	08005973 	.word	0x08005973
 8005940:	08005973 	.word	0x08005973
 8005944:	08005973 	.word	0x08005973
 8005948:	0800596b 	.word	0x0800596b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800594c:	f7fe f9ba 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8005950:	61b8      	str	r0, [r7, #24]
        break;
 8005952:	e013      	b.n	800597c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005954:	f7fe f9d8 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8005958:	61b8      	str	r0, [r7, #24]
        break;
 800595a:	e00f      	b.n	800597c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800595c:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <UART_SetConfig+0x268>)
 800595e:	61bb      	str	r3, [r7, #24]
        break;
 8005960:	e00c      	b.n	800597c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005962:	f7fe f939 	bl	8003bd8 <HAL_RCC_GetSysClockFreq>
 8005966:	61b8      	str	r0, [r7, #24]
        break;
 8005968:	e008      	b.n	800597c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800596a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596e:	61bb      	str	r3, [r7, #24]
        break;
 8005970:	e004      	b.n	800597c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	77bb      	strb	r3, [r7, #30]
        break;
 800597a:	bf00      	nop
    }

    if (pclk != 0U)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d018      	beq.n	80059b4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	085a      	lsrs	r2, r3, #1
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	441a      	add	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b0f      	cmp	r3, #15
 800599a:	d909      	bls.n	80059b0 <UART_SetConfig+0x238>
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a2:	d205      	bcs.n	80059b0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60da      	str	r2, [r3, #12]
 80059ae:	e001      	b.n	80059b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80059c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3720      	adds	r7, #32
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	efff69f3 	.word	0xefff69f3
 80059d0:	40013800 	.word	0x40013800
 80059d4:	40021000 	.word	0x40021000
 80059d8:	40004400 	.word	0x40004400
 80059dc:	40004800 	.word	0x40004800
 80059e0:	007a1200 	.word	0x007a1200

080059e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f003 0301 	and.w	r3, r3, #1
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f003 0320 	and.w	r3, r3, #32
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01a      	beq.n	8005afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ae2:	d10a      	bne.n	8005afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	605a      	str	r2, [r3, #4]
  }
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b098      	sub	sp, #96	; 0x60
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b38:	f7fb faf4 	bl	8001124 <HAL_GetTick>
 8005b3c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d12e      	bne.n	8005baa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b54:	2200      	movs	r2, #0
 8005b56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f88c 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d021      	beq.n	8005baa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b84:	647b      	str	r3, [r7, #68]	; 0x44
 8005b86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e062      	b.n	8005c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b04      	cmp	r3, #4
 8005bb6:	d149      	bne.n	8005c4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f856 	bl	8005c78 <UART_WaitOnFlagUntilTimeout>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03c      	beq.n	8005c4c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	623b      	str	r3, [r7, #32]
   return(result);
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
 8005bf2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf8:	e841 2300 	strex	r3, r2, [r1]
 8005bfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e6      	bne.n	8005bd2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f023 0301 	bic.w	r3, r3, #1
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3308      	adds	r3, #8
 8005c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c24:	61fa      	str	r2, [r7, #28]
 8005c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	69fa      	ldr	r2, [r7, #28]
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	617b      	str	r3, [r7, #20]
   return(result);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e5      	bne.n	8005c04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e011      	b.n	8005c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3758      	adds	r7, #88	; 0x58
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	603b      	str	r3, [r7, #0]
 8005c84:	4613      	mov	r3, r2
 8005c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c88:	e049      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c90:	d045      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fb fa47 	bl	8001124 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e048      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d031      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d110      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f8ff 	bl	8005ed4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e029      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf8:	d111      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f8e5 	bl	8005ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d0a6      	beq.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b097      	sub	sp, #92	; 0x5c
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	4613      	mov	r3, r2
 8005d54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	88fa      	ldrh	r2, [r7, #6]
 8005d60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	88fa      	ldrh	r2, [r7, #6]
 8005d68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d10e      	bne.n	8005d9a <UART_Start_Receive_IT+0x52>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <UART_Start_Receive_IT+0x48>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d8e:	e02d      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	22ff      	movs	r2, #255	; 0xff
 8005d94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005d98:	e028      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d10d      	bne.n	8005dbe <UART_Start_Receive_IT+0x76>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <UART_Start_Receive_IT+0x6c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	22ff      	movs	r2, #255	; 0xff
 8005dae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005db2:	e01b      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	227f      	movs	r2, #127	; 0x7f
 8005db8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dbc:	e016      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc6:	d10d      	bne.n	8005de4 <UART_Start_Receive_IT+0x9c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <UART_Start_Receive_IT+0x92>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	227f      	movs	r2, #127	; 0x7f
 8005dd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005dd8:	e008      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	223f      	movs	r2, #63	; 0x3f
 8005dde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005de2:	e003      	b.n	8005dec <UART_Start_Receive_IT+0xa4>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2222      	movs	r2, #34	; 0x22
 8005df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3308      	adds	r3, #8
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0e:	f043 0301 	orr.w	r3, r3, #1
 8005e12:	657b      	str	r3, [r7, #84]	; 0x54
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3308      	adds	r3, #8
 8005e1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005e1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d107      	bne.n	8005e4a <UART_Start_Receive_IT+0x102>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a21      	ldr	r2, [pc, #132]	; (8005ecc <UART_Start_Receive_IT+0x184>)
 8005e46:	669a      	str	r2, [r3, #104]	; 0x68
 8005e48:	e002      	b.n	8005e50 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a20      	ldr	r2, [pc, #128]	; (8005ed0 <UART_Start_Receive_IT+0x188>)
 8005e4e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d019      	beq.n	8005e8c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	461a      	mov	r2, r3
 8005e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e76:	637b      	str	r3, [r7, #52]	; 0x34
 8005e78:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1e6      	bne.n	8005e58 <UART_Start_Receive_IT+0x110>
 8005e8a:	e018      	b.n	8005ebe <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	e853 3f00 	ldrex	r3, [r3]
 8005e98:	613b      	str	r3, [r7, #16]
   return(result);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f043 0320 	orr.w	r3, r3, #32
 8005ea0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	623b      	str	r3, [r7, #32]
 8005eac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	69f9      	ldr	r1, [r7, #28]
 8005eb0:	6a3a      	ldr	r2, [r7, #32]
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e6      	bne.n	8005e8c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	375c      	adds	r7, #92	; 0x5c
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	080061c5 	.word	0x080061c5
 8005ed0:	0800601d 	.word	0x0800601d

08005ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b095      	sub	sp, #84	; 0x54
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ef0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efa:	643b      	str	r3, [r7, #64]	; 0x40
 8005efc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e6      	bne.n	8005edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d118      	bne.n	8005f7c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0310 	bic.w	r3, r3, #16
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	461a      	mov	r2, r3
 8005f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f68:	61bb      	str	r3, [r7, #24]
 8005f6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6979      	ldr	r1, [r7, #20]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	613b      	str	r3, [r7, #16]
   return(result);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e6      	bne.n	8005f4a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005f90:	bf00      	nop
 8005f92:	3754      	adds	r7, #84	; 0x54
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f7ff fbc6 	bl	800574c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe4:	61fb      	str	r3, [r7, #28]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6979      	ldr	r1, [r7, #20]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff fb92 	bl	8005738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006014:	bf00      	nop
 8006016:	3720      	adds	r7, #32
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b09c      	sub	sp, #112	; 0x70
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800602a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006034:	2b22      	cmp	r3, #34	; 0x22
 8006036:	f040 80b9 	bne.w	80061ac <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006040:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006044:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006048:	b2d9      	uxtb	r1, r3
 800604a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006054:	400a      	ands	r2, r1
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800606a:	b29b      	uxth	r3, r3
 800606c:	3b01      	subs	r3, #1
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	f040 809c 	bne.w	80061bc <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006094:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006098:	66bb      	str	r3, [r7, #104]	; 0x68
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e6      	bne.n	8006084 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3308      	adds	r3, #8
 80060bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	667b      	str	r3, [r7, #100]	; 0x64
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80060d6:	647a      	str	r2, [r7, #68]	; 0x44
 80060d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060de:	e841 2300 	strex	r3, r2, [r1]
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1e5      	bne.n	80060b6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d018      	beq.n	800613e <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	e853 3f00 	ldrex	r3, [r3]
 8006118:	623b      	str	r3, [r7, #32]
   return(result);
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006120:	663b      	str	r3, [r7, #96]	; 0x60
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	461a      	mov	r2, r3
 8006128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800612a:	633b      	str	r3, [r7, #48]	; 0x30
 800612c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e6      	bne.n	800610c <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006142:	2b01      	cmp	r3, #1
 8006144:	d12e      	bne.n	80061a4 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60fb      	str	r3, [r7, #12]
   return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	617b      	str	r3, [r7, #20]
   return(result);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e6      	bne.n	800614c <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d103      	bne.n	8006194 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2210      	movs	r2, #16
 8006192:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800619a:	4619      	mov	r1, r3
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7ff fadf 	bl	8005760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80061a2:	e00b      	b.n	80061bc <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7fa f9f7 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80061aa:	e007      	b.n	80061bc <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	699a      	ldr	r2, [r3, #24]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0208 	orr.w	r2, r2, #8
 80061ba:	619a      	str	r2, [r3, #24]
}
 80061bc:	bf00      	nop
 80061be:	3770      	adds	r7, #112	; 0x70
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b09c      	sub	sp, #112	; 0x70
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80061d2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061dc:	2b22      	cmp	r3, #34	; 0x22
 80061de:	f040 80b9 	bne.w	8006354 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80061e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80061f2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80061f6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80061fa:	4013      	ands	r3, r2
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006200:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	f040 809c 	bne.w	8006364 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800623a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006240:	667b      	str	r3, [r7, #100]	; 0x64
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624a:	657b      	str	r3, [r7, #84]	; 0x54
 800624c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006250:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e6      	bne.n	800622c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3308      	adds	r3, #8
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	663b      	str	r3, [r7, #96]	; 0x60
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800627e:	643a      	str	r2, [r7, #64]	; 0x40
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d018      	beq.n	80062e6 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	e853 3f00 	ldrex	r3, [r3]
 80062c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e6      	bne.n	80062b4 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d12e      	bne.n	800634c <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	60bb      	str	r3, [r7, #8]
   return(result);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	65bb      	str	r3, [r7, #88]	; 0x58
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006312:	61bb      	str	r3, [r7, #24]
 8006314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	613b      	str	r3, [r7, #16]
   return(result);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f003 0310 	and.w	r3, r3, #16
 8006330:	2b10      	cmp	r3, #16
 8006332:	d103      	bne.n	800633c <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2210      	movs	r2, #16
 800633a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006342:	4619      	mov	r1, r3
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f7ff fa0b 	bl	8005760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800634a:	e00b      	b.n	8006364 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fa f923 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8006352:	e007      	b.n	8006364 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0208 	orr.w	r2, r2, #8
 8006362:	619a      	str	r2, [r3, #24]
}
 8006364:	bf00      	nop
 8006366:	3770      	adds	r7, #112	; 0x70
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <siprintf>:
 8006380:	b40e      	push	{r1, r2, r3}
 8006382:	b500      	push	{lr}
 8006384:	b09c      	sub	sp, #112	; 0x70
 8006386:	ab1d      	add	r3, sp, #116	; 0x74
 8006388:	9002      	str	r0, [sp, #8]
 800638a:	9006      	str	r0, [sp, #24]
 800638c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006390:	4809      	ldr	r0, [pc, #36]	; (80063b8 <siprintf+0x38>)
 8006392:	9107      	str	r1, [sp, #28]
 8006394:	9104      	str	r1, [sp, #16]
 8006396:	4909      	ldr	r1, [pc, #36]	; (80063bc <siprintf+0x3c>)
 8006398:	f853 2b04 	ldr.w	r2, [r3], #4
 800639c:	9105      	str	r1, [sp, #20]
 800639e:	6800      	ldr	r0, [r0, #0]
 80063a0:	9301      	str	r3, [sp, #4]
 80063a2:	a902      	add	r1, sp, #8
 80063a4:	f000 f89a 	bl	80064dc <_svfiprintf_r>
 80063a8:	9b02      	ldr	r3, [sp, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	b01c      	add	sp, #112	; 0x70
 80063b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063b4:	b003      	add	sp, #12
 80063b6:	4770      	bx	lr
 80063b8:	200000cc 	.word	0x200000cc
 80063bc:	ffff0208 	.word	0xffff0208

080063c0 <memset>:
 80063c0:	4402      	add	r2, r0
 80063c2:	4603      	mov	r3, r0
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d100      	bne.n	80063ca <memset+0xa>
 80063c8:	4770      	bx	lr
 80063ca:	f803 1b01 	strb.w	r1, [r3], #1
 80063ce:	e7f9      	b.n	80063c4 <memset+0x4>

080063d0 <__errno>:
 80063d0:	4b01      	ldr	r3, [pc, #4]	; (80063d8 <__errno+0x8>)
 80063d2:	6818      	ldr	r0, [r3, #0]
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	200000cc 	.word	0x200000cc

080063dc <__libc_init_array>:
 80063dc:	b570      	push	{r4, r5, r6, lr}
 80063de:	4d0d      	ldr	r5, [pc, #52]	; (8006414 <__libc_init_array+0x38>)
 80063e0:	4c0d      	ldr	r4, [pc, #52]	; (8006418 <__libc_init_array+0x3c>)
 80063e2:	1b64      	subs	r4, r4, r5
 80063e4:	10a4      	asrs	r4, r4, #2
 80063e6:	2600      	movs	r6, #0
 80063e8:	42a6      	cmp	r6, r4
 80063ea:	d109      	bne.n	8006400 <__libc_init_array+0x24>
 80063ec:	4d0b      	ldr	r5, [pc, #44]	; (800641c <__libc_init_array+0x40>)
 80063ee:	4c0c      	ldr	r4, [pc, #48]	; (8006420 <__libc_init_array+0x44>)
 80063f0:	f000 fc6a 	bl	8006cc8 <_init>
 80063f4:	1b64      	subs	r4, r4, r5
 80063f6:	10a4      	asrs	r4, r4, #2
 80063f8:	2600      	movs	r6, #0
 80063fa:	42a6      	cmp	r6, r4
 80063fc:	d105      	bne.n	800640a <__libc_init_array+0x2e>
 80063fe:	bd70      	pop	{r4, r5, r6, pc}
 8006400:	f855 3b04 	ldr.w	r3, [r5], #4
 8006404:	4798      	blx	r3
 8006406:	3601      	adds	r6, #1
 8006408:	e7ee      	b.n	80063e8 <__libc_init_array+0xc>
 800640a:	f855 3b04 	ldr.w	r3, [r5], #4
 800640e:	4798      	blx	r3
 8006410:	3601      	adds	r6, #1
 8006412:	e7f2      	b.n	80063fa <__libc_init_array+0x1e>
 8006414:	08006dc0 	.word	0x08006dc0
 8006418:	08006dc0 	.word	0x08006dc0
 800641c:	08006dc0 	.word	0x08006dc0
 8006420:	08006dc4 	.word	0x08006dc4

08006424 <__retarget_lock_acquire_recursive>:
 8006424:	4770      	bx	lr

08006426 <__retarget_lock_release_recursive>:
 8006426:	4770      	bx	lr

08006428 <__ssputs_r>:
 8006428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	688e      	ldr	r6, [r1, #8]
 800642e:	461f      	mov	r7, r3
 8006430:	42be      	cmp	r6, r7
 8006432:	680b      	ldr	r3, [r1, #0]
 8006434:	4682      	mov	sl, r0
 8006436:	460c      	mov	r4, r1
 8006438:	4690      	mov	r8, r2
 800643a:	d82c      	bhi.n	8006496 <__ssputs_r+0x6e>
 800643c:	898a      	ldrh	r2, [r1, #12]
 800643e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006442:	d026      	beq.n	8006492 <__ssputs_r+0x6a>
 8006444:	6965      	ldr	r5, [r4, #20]
 8006446:	6909      	ldr	r1, [r1, #16]
 8006448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800644c:	eba3 0901 	sub.w	r9, r3, r1
 8006450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006454:	1c7b      	adds	r3, r7, #1
 8006456:	444b      	add	r3, r9
 8006458:	106d      	asrs	r5, r5, #1
 800645a:	429d      	cmp	r5, r3
 800645c:	bf38      	it	cc
 800645e:	461d      	movcc	r5, r3
 8006460:	0553      	lsls	r3, r2, #21
 8006462:	d527      	bpl.n	80064b4 <__ssputs_r+0x8c>
 8006464:	4629      	mov	r1, r5
 8006466:	f000 f957 	bl	8006718 <_malloc_r>
 800646a:	4606      	mov	r6, r0
 800646c:	b360      	cbz	r0, 80064c8 <__ssputs_r+0xa0>
 800646e:	6921      	ldr	r1, [r4, #16]
 8006470:	464a      	mov	r2, r9
 8006472:	f000 fbc7 	bl	8006c04 <memcpy>
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800647c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	6126      	str	r6, [r4, #16]
 8006484:	6165      	str	r5, [r4, #20]
 8006486:	444e      	add	r6, r9
 8006488:	eba5 0509 	sub.w	r5, r5, r9
 800648c:	6026      	str	r6, [r4, #0]
 800648e:	60a5      	str	r5, [r4, #8]
 8006490:	463e      	mov	r6, r7
 8006492:	42be      	cmp	r6, r7
 8006494:	d900      	bls.n	8006498 <__ssputs_r+0x70>
 8006496:	463e      	mov	r6, r7
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	4632      	mov	r2, r6
 800649c:	4641      	mov	r1, r8
 800649e:	f000 fb86 	bl	8006bae <memmove>
 80064a2:	68a3      	ldr	r3, [r4, #8]
 80064a4:	1b9b      	subs	r3, r3, r6
 80064a6:	60a3      	str	r3, [r4, #8]
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	4433      	add	r3, r6
 80064ac:	6023      	str	r3, [r4, #0]
 80064ae:	2000      	movs	r0, #0
 80064b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064b4:	462a      	mov	r2, r5
 80064b6:	f000 fb4b 	bl	8006b50 <_realloc_r>
 80064ba:	4606      	mov	r6, r0
 80064bc:	2800      	cmp	r0, #0
 80064be:	d1e0      	bne.n	8006482 <__ssputs_r+0x5a>
 80064c0:	6921      	ldr	r1, [r4, #16]
 80064c2:	4650      	mov	r0, sl
 80064c4:	f000 fbac 	bl	8006c20 <_free_r>
 80064c8:	230c      	movs	r3, #12
 80064ca:	f8ca 3000 	str.w	r3, [sl]
 80064ce:	89a3      	ldrh	r3, [r4, #12]
 80064d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d4:	81a3      	strh	r3, [r4, #12]
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064da:	e7e9      	b.n	80064b0 <__ssputs_r+0x88>

080064dc <_svfiprintf_r>:
 80064dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	4698      	mov	r8, r3
 80064e2:	898b      	ldrh	r3, [r1, #12]
 80064e4:	061b      	lsls	r3, r3, #24
 80064e6:	b09d      	sub	sp, #116	; 0x74
 80064e8:	4607      	mov	r7, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	4614      	mov	r4, r2
 80064ee:	d50e      	bpl.n	800650e <_svfiprintf_r+0x32>
 80064f0:	690b      	ldr	r3, [r1, #16]
 80064f2:	b963      	cbnz	r3, 800650e <_svfiprintf_r+0x32>
 80064f4:	2140      	movs	r1, #64	; 0x40
 80064f6:	f000 f90f 	bl	8006718 <_malloc_r>
 80064fa:	6028      	str	r0, [r5, #0]
 80064fc:	6128      	str	r0, [r5, #16]
 80064fe:	b920      	cbnz	r0, 800650a <_svfiprintf_r+0x2e>
 8006500:	230c      	movs	r3, #12
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006508:	e0d0      	b.n	80066ac <_svfiprintf_r+0x1d0>
 800650a:	2340      	movs	r3, #64	; 0x40
 800650c:	616b      	str	r3, [r5, #20]
 800650e:	2300      	movs	r3, #0
 8006510:	9309      	str	r3, [sp, #36]	; 0x24
 8006512:	2320      	movs	r3, #32
 8006514:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006518:	f8cd 800c 	str.w	r8, [sp, #12]
 800651c:	2330      	movs	r3, #48	; 0x30
 800651e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066c4 <_svfiprintf_r+0x1e8>
 8006522:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006526:	f04f 0901 	mov.w	r9, #1
 800652a:	4623      	mov	r3, r4
 800652c:	469a      	mov	sl, r3
 800652e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006532:	b10a      	cbz	r2, 8006538 <_svfiprintf_r+0x5c>
 8006534:	2a25      	cmp	r2, #37	; 0x25
 8006536:	d1f9      	bne.n	800652c <_svfiprintf_r+0x50>
 8006538:	ebba 0b04 	subs.w	fp, sl, r4
 800653c:	d00b      	beq.n	8006556 <_svfiprintf_r+0x7a>
 800653e:	465b      	mov	r3, fp
 8006540:	4622      	mov	r2, r4
 8006542:	4629      	mov	r1, r5
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff ff6f 	bl	8006428 <__ssputs_r>
 800654a:	3001      	adds	r0, #1
 800654c:	f000 80a9 	beq.w	80066a2 <_svfiprintf_r+0x1c6>
 8006550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006552:	445a      	add	r2, fp
 8006554:	9209      	str	r2, [sp, #36]	; 0x24
 8006556:	f89a 3000 	ldrb.w	r3, [sl]
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80a1 	beq.w	80066a2 <_svfiprintf_r+0x1c6>
 8006560:	2300      	movs	r3, #0
 8006562:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006566:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800656a:	f10a 0a01 	add.w	sl, sl, #1
 800656e:	9304      	str	r3, [sp, #16]
 8006570:	9307      	str	r3, [sp, #28]
 8006572:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006576:	931a      	str	r3, [sp, #104]	; 0x68
 8006578:	4654      	mov	r4, sl
 800657a:	2205      	movs	r2, #5
 800657c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006580:	4850      	ldr	r0, [pc, #320]	; (80066c4 <_svfiprintf_r+0x1e8>)
 8006582:	f7f9 fe2d 	bl	80001e0 <memchr>
 8006586:	9a04      	ldr	r2, [sp, #16]
 8006588:	b9d8      	cbnz	r0, 80065c2 <_svfiprintf_r+0xe6>
 800658a:	06d0      	lsls	r0, r2, #27
 800658c:	bf44      	itt	mi
 800658e:	2320      	movmi	r3, #32
 8006590:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006594:	0711      	lsls	r1, r2, #28
 8006596:	bf44      	itt	mi
 8006598:	232b      	movmi	r3, #43	; 0x2b
 800659a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659e:	f89a 3000 	ldrb.w	r3, [sl]
 80065a2:	2b2a      	cmp	r3, #42	; 0x2a
 80065a4:	d015      	beq.n	80065d2 <_svfiprintf_r+0xf6>
 80065a6:	9a07      	ldr	r2, [sp, #28]
 80065a8:	4654      	mov	r4, sl
 80065aa:	2000      	movs	r0, #0
 80065ac:	f04f 0c0a 	mov.w	ip, #10
 80065b0:	4621      	mov	r1, r4
 80065b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065b6:	3b30      	subs	r3, #48	; 0x30
 80065b8:	2b09      	cmp	r3, #9
 80065ba:	d94d      	bls.n	8006658 <_svfiprintf_r+0x17c>
 80065bc:	b1b0      	cbz	r0, 80065ec <_svfiprintf_r+0x110>
 80065be:	9207      	str	r2, [sp, #28]
 80065c0:	e014      	b.n	80065ec <_svfiprintf_r+0x110>
 80065c2:	eba0 0308 	sub.w	r3, r0, r8
 80065c6:	fa09 f303 	lsl.w	r3, r9, r3
 80065ca:	4313      	orrs	r3, r2
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	46a2      	mov	sl, r4
 80065d0:	e7d2      	b.n	8006578 <_svfiprintf_r+0x9c>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	1d19      	adds	r1, r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	9103      	str	r1, [sp, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bfbb      	ittet	lt
 80065de:	425b      	neglt	r3, r3
 80065e0:	f042 0202 	orrlt.w	r2, r2, #2
 80065e4:	9307      	strge	r3, [sp, #28]
 80065e6:	9307      	strlt	r3, [sp, #28]
 80065e8:	bfb8      	it	lt
 80065ea:	9204      	strlt	r2, [sp, #16]
 80065ec:	7823      	ldrb	r3, [r4, #0]
 80065ee:	2b2e      	cmp	r3, #46	; 0x2e
 80065f0:	d10c      	bne.n	800660c <_svfiprintf_r+0x130>
 80065f2:	7863      	ldrb	r3, [r4, #1]
 80065f4:	2b2a      	cmp	r3, #42	; 0x2a
 80065f6:	d134      	bne.n	8006662 <_svfiprintf_r+0x186>
 80065f8:	9b03      	ldr	r3, [sp, #12]
 80065fa:	1d1a      	adds	r2, r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	9203      	str	r2, [sp, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	bfb8      	it	lt
 8006604:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006608:	3402      	adds	r4, #2
 800660a:	9305      	str	r3, [sp, #20]
 800660c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80066d4 <_svfiprintf_r+0x1f8>
 8006610:	7821      	ldrb	r1, [r4, #0]
 8006612:	2203      	movs	r2, #3
 8006614:	4650      	mov	r0, sl
 8006616:	f7f9 fde3 	bl	80001e0 <memchr>
 800661a:	b138      	cbz	r0, 800662c <_svfiprintf_r+0x150>
 800661c:	9b04      	ldr	r3, [sp, #16]
 800661e:	eba0 000a 	sub.w	r0, r0, sl
 8006622:	2240      	movs	r2, #64	; 0x40
 8006624:	4082      	lsls	r2, r0
 8006626:	4313      	orrs	r3, r2
 8006628:	3401      	adds	r4, #1
 800662a:	9304      	str	r3, [sp, #16]
 800662c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006630:	4825      	ldr	r0, [pc, #148]	; (80066c8 <_svfiprintf_r+0x1ec>)
 8006632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006636:	2206      	movs	r2, #6
 8006638:	f7f9 fdd2 	bl	80001e0 <memchr>
 800663c:	2800      	cmp	r0, #0
 800663e:	d038      	beq.n	80066b2 <_svfiprintf_r+0x1d6>
 8006640:	4b22      	ldr	r3, [pc, #136]	; (80066cc <_svfiprintf_r+0x1f0>)
 8006642:	bb1b      	cbnz	r3, 800668c <_svfiprintf_r+0x1b0>
 8006644:	9b03      	ldr	r3, [sp, #12]
 8006646:	3307      	adds	r3, #7
 8006648:	f023 0307 	bic.w	r3, r3, #7
 800664c:	3308      	adds	r3, #8
 800664e:	9303      	str	r3, [sp, #12]
 8006650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006652:	4433      	add	r3, r6
 8006654:	9309      	str	r3, [sp, #36]	; 0x24
 8006656:	e768      	b.n	800652a <_svfiprintf_r+0x4e>
 8006658:	fb0c 3202 	mla	r2, ip, r2, r3
 800665c:	460c      	mov	r4, r1
 800665e:	2001      	movs	r0, #1
 8006660:	e7a6      	b.n	80065b0 <_svfiprintf_r+0xd4>
 8006662:	2300      	movs	r3, #0
 8006664:	3401      	adds	r4, #1
 8006666:	9305      	str	r3, [sp, #20]
 8006668:	4619      	mov	r1, r3
 800666a:	f04f 0c0a 	mov.w	ip, #10
 800666e:	4620      	mov	r0, r4
 8006670:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006674:	3a30      	subs	r2, #48	; 0x30
 8006676:	2a09      	cmp	r2, #9
 8006678:	d903      	bls.n	8006682 <_svfiprintf_r+0x1a6>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d0c6      	beq.n	800660c <_svfiprintf_r+0x130>
 800667e:	9105      	str	r1, [sp, #20]
 8006680:	e7c4      	b.n	800660c <_svfiprintf_r+0x130>
 8006682:	fb0c 2101 	mla	r1, ip, r1, r2
 8006686:	4604      	mov	r4, r0
 8006688:	2301      	movs	r3, #1
 800668a:	e7f0      	b.n	800666e <_svfiprintf_r+0x192>
 800668c:	ab03      	add	r3, sp, #12
 800668e:	9300      	str	r3, [sp, #0]
 8006690:	462a      	mov	r2, r5
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <_svfiprintf_r+0x1f4>)
 8006694:	a904      	add	r1, sp, #16
 8006696:	4638      	mov	r0, r7
 8006698:	f3af 8000 	nop.w
 800669c:	1c42      	adds	r2, r0, #1
 800669e:	4606      	mov	r6, r0
 80066a0:	d1d6      	bne.n	8006650 <_svfiprintf_r+0x174>
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	065b      	lsls	r3, r3, #25
 80066a6:	f53f af2d 	bmi.w	8006504 <_svfiprintf_r+0x28>
 80066aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066ac:	b01d      	add	sp, #116	; 0x74
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	ab03      	add	r3, sp, #12
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	462a      	mov	r2, r5
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <_svfiprintf_r+0x1f4>)
 80066ba:	a904      	add	r1, sp, #16
 80066bc:	4638      	mov	r0, r7
 80066be:	f000 f919 	bl	80068f4 <_printf_i>
 80066c2:	e7eb      	b.n	800669c <_svfiprintf_r+0x1c0>
 80066c4:	08006d8c 	.word	0x08006d8c
 80066c8:	08006d96 	.word	0x08006d96
 80066cc:	00000000 	.word	0x00000000
 80066d0:	08006429 	.word	0x08006429
 80066d4:	08006d92 	.word	0x08006d92

080066d8 <sbrk_aligned>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	4e0e      	ldr	r6, [pc, #56]	; (8006714 <sbrk_aligned+0x3c>)
 80066dc:	460c      	mov	r4, r1
 80066de:	6831      	ldr	r1, [r6, #0]
 80066e0:	4605      	mov	r5, r0
 80066e2:	b911      	cbnz	r1, 80066ea <sbrk_aligned+0x12>
 80066e4:	f000 fa7e 	bl	8006be4 <_sbrk_r>
 80066e8:	6030      	str	r0, [r6, #0]
 80066ea:	4621      	mov	r1, r4
 80066ec:	4628      	mov	r0, r5
 80066ee:	f000 fa79 	bl	8006be4 <_sbrk_r>
 80066f2:	1c43      	adds	r3, r0, #1
 80066f4:	d00a      	beq.n	800670c <sbrk_aligned+0x34>
 80066f6:	1cc4      	adds	r4, r0, #3
 80066f8:	f024 0403 	bic.w	r4, r4, #3
 80066fc:	42a0      	cmp	r0, r4
 80066fe:	d007      	beq.n	8006710 <sbrk_aligned+0x38>
 8006700:	1a21      	subs	r1, r4, r0
 8006702:	4628      	mov	r0, r5
 8006704:	f000 fa6e 	bl	8006be4 <_sbrk_r>
 8006708:	3001      	adds	r0, #1
 800670a:	d101      	bne.n	8006710 <sbrk_aligned+0x38>
 800670c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006710:	4620      	mov	r0, r4
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	20000574 	.word	0x20000574

08006718 <_malloc_r>:
 8006718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800671c:	1ccd      	adds	r5, r1, #3
 800671e:	f025 0503 	bic.w	r5, r5, #3
 8006722:	3508      	adds	r5, #8
 8006724:	2d0c      	cmp	r5, #12
 8006726:	bf38      	it	cc
 8006728:	250c      	movcc	r5, #12
 800672a:	2d00      	cmp	r5, #0
 800672c:	4607      	mov	r7, r0
 800672e:	db01      	blt.n	8006734 <_malloc_r+0x1c>
 8006730:	42a9      	cmp	r1, r5
 8006732:	d905      	bls.n	8006740 <_malloc_r+0x28>
 8006734:	230c      	movs	r3, #12
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	2600      	movs	r6, #0
 800673a:	4630      	mov	r0, r6
 800673c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006740:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006814 <_malloc_r+0xfc>
 8006744:	f000 f9f8 	bl	8006b38 <__malloc_lock>
 8006748:	f8d8 3000 	ldr.w	r3, [r8]
 800674c:	461c      	mov	r4, r3
 800674e:	bb5c      	cbnz	r4, 80067a8 <_malloc_r+0x90>
 8006750:	4629      	mov	r1, r5
 8006752:	4638      	mov	r0, r7
 8006754:	f7ff ffc0 	bl	80066d8 <sbrk_aligned>
 8006758:	1c43      	adds	r3, r0, #1
 800675a:	4604      	mov	r4, r0
 800675c:	d155      	bne.n	800680a <_malloc_r+0xf2>
 800675e:	f8d8 4000 	ldr.w	r4, [r8]
 8006762:	4626      	mov	r6, r4
 8006764:	2e00      	cmp	r6, #0
 8006766:	d145      	bne.n	80067f4 <_malloc_r+0xdc>
 8006768:	2c00      	cmp	r4, #0
 800676a:	d048      	beq.n	80067fe <_malloc_r+0xe6>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	4631      	mov	r1, r6
 8006770:	4638      	mov	r0, r7
 8006772:	eb04 0903 	add.w	r9, r4, r3
 8006776:	f000 fa35 	bl	8006be4 <_sbrk_r>
 800677a:	4581      	cmp	r9, r0
 800677c:	d13f      	bne.n	80067fe <_malloc_r+0xe6>
 800677e:	6821      	ldr	r1, [r4, #0]
 8006780:	1a6d      	subs	r5, r5, r1
 8006782:	4629      	mov	r1, r5
 8006784:	4638      	mov	r0, r7
 8006786:	f7ff ffa7 	bl	80066d8 <sbrk_aligned>
 800678a:	3001      	adds	r0, #1
 800678c:	d037      	beq.n	80067fe <_malloc_r+0xe6>
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	442b      	add	r3, r5
 8006792:	6023      	str	r3, [r4, #0]
 8006794:	f8d8 3000 	ldr.w	r3, [r8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d038      	beq.n	800680e <_malloc_r+0xf6>
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	42a2      	cmp	r2, r4
 80067a0:	d12b      	bne.n	80067fa <_malloc_r+0xe2>
 80067a2:	2200      	movs	r2, #0
 80067a4:	605a      	str	r2, [r3, #4]
 80067a6:	e00f      	b.n	80067c8 <_malloc_r+0xb0>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	1b52      	subs	r2, r2, r5
 80067ac:	d41f      	bmi.n	80067ee <_malloc_r+0xd6>
 80067ae:	2a0b      	cmp	r2, #11
 80067b0:	d917      	bls.n	80067e2 <_malloc_r+0xca>
 80067b2:	1961      	adds	r1, r4, r5
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	6025      	str	r5, [r4, #0]
 80067b8:	bf18      	it	ne
 80067ba:	6059      	strne	r1, [r3, #4]
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	bf08      	it	eq
 80067c0:	f8c8 1000 	streq.w	r1, [r8]
 80067c4:	5162      	str	r2, [r4, r5]
 80067c6:	604b      	str	r3, [r1, #4]
 80067c8:	4638      	mov	r0, r7
 80067ca:	f104 060b 	add.w	r6, r4, #11
 80067ce:	f000 f9b9 	bl	8006b44 <__malloc_unlock>
 80067d2:	f026 0607 	bic.w	r6, r6, #7
 80067d6:	1d23      	adds	r3, r4, #4
 80067d8:	1af2      	subs	r2, r6, r3
 80067da:	d0ae      	beq.n	800673a <_malloc_r+0x22>
 80067dc:	1b9b      	subs	r3, r3, r6
 80067de:	50a3      	str	r3, [r4, r2]
 80067e0:	e7ab      	b.n	800673a <_malloc_r+0x22>
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	6862      	ldr	r2, [r4, #4]
 80067e6:	d1dd      	bne.n	80067a4 <_malloc_r+0x8c>
 80067e8:	f8c8 2000 	str.w	r2, [r8]
 80067ec:	e7ec      	b.n	80067c8 <_malloc_r+0xb0>
 80067ee:	4623      	mov	r3, r4
 80067f0:	6864      	ldr	r4, [r4, #4]
 80067f2:	e7ac      	b.n	800674e <_malloc_r+0x36>
 80067f4:	4634      	mov	r4, r6
 80067f6:	6876      	ldr	r6, [r6, #4]
 80067f8:	e7b4      	b.n	8006764 <_malloc_r+0x4c>
 80067fa:	4613      	mov	r3, r2
 80067fc:	e7cc      	b.n	8006798 <_malloc_r+0x80>
 80067fe:	230c      	movs	r3, #12
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	4638      	mov	r0, r7
 8006804:	f000 f99e 	bl	8006b44 <__malloc_unlock>
 8006808:	e797      	b.n	800673a <_malloc_r+0x22>
 800680a:	6025      	str	r5, [r4, #0]
 800680c:	e7dc      	b.n	80067c8 <_malloc_r+0xb0>
 800680e:	605b      	str	r3, [r3, #4]
 8006810:	deff      	udf	#255	; 0xff
 8006812:	bf00      	nop
 8006814:	20000570 	.word	0x20000570

08006818 <_printf_common>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	4616      	mov	r6, r2
 800681e:	4699      	mov	r9, r3
 8006820:	688a      	ldr	r2, [r1, #8]
 8006822:	690b      	ldr	r3, [r1, #16]
 8006824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006828:	4293      	cmp	r3, r2
 800682a:	bfb8      	it	lt
 800682c:	4613      	movlt	r3, r2
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006834:	4607      	mov	r7, r0
 8006836:	460c      	mov	r4, r1
 8006838:	b10a      	cbz	r2, 800683e <_printf_common+0x26>
 800683a:	3301      	adds	r3, #1
 800683c:	6033      	str	r3, [r6, #0]
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	0699      	lsls	r1, r3, #26
 8006842:	bf42      	ittt	mi
 8006844:	6833      	ldrmi	r3, [r6, #0]
 8006846:	3302      	addmi	r3, #2
 8006848:	6033      	strmi	r3, [r6, #0]
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	f015 0506 	ands.w	r5, r5, #6
 8006850:	d106      	bne.n	8006860 <_printf_common+0x48>
 8006852:	f104 0a19 	add.w	sl, r4, #25
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	6832      	ldr	r2, [r6, #0]
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	42ab      	cmp	r3, r5
 800685e:	dc26      	bgt.n	80068ae <_printf_common+0x96>
 8006860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006864:	1e13      	subs	r3, r2, #0
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	bf18      	it	ne
 800686a:	2301      	movne	r3, #1
 800686c:	0692      	lsls	r2, r2, #26
 800686e:	d42b      	bmi.n	80068c8 <_printf_common+0xb0>
 8006870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006874:	4649      	mov	r1, r9
 8006876:	4638      	mov	r0, r7
 8006878:	47c0      	blx	r8
 800687a:	3001      	adds	r0, #1
 800687c:	d01e      	beq.n	80068bc <_printf_common+0xa4>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	6922      	ldr	r2, [r4, #16]
 8006882:	f003 0306 	and.w	r3, r3, #6
 8006886:	2b04      	cmp	r3, #4
 8006888:	bf02      	ittt	eq
 800688a:	68e5      	ldreq	r5, [r4, #12]
 800688c:	6833      	ldreq	r3, [r6, #0]
 800688e:	1aed      	subeq	r5, r5, r3
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	bf0c      	ite	eq
 8006894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006898:	2500      	movne	r5, #0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfc4      	itt	gt
 800689e:	1a9b      	subgt	r3, r3, r2
 80068a0:	18ed      	addgt	r5, r5, r3
 80068a2:	2600      	movs	r6, #0
 80068a4:	341a      	adds	r4, #26
 80068a6:	42b5      	cmp	r5, r6
 80068a8:	d11a      	bne.n	80068e0 <_printf_common+0xc8>
 80068aa:	2000      	movs	r0, #0
 80068ac:	e008      	b.n	80068c0 <_printf_common+0xa8>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4652      	mov	r2, sl
 80068b2:	4649      	mov	r1, r9
 80068b4:	4638      	mov	r0, r7
 80068b6:	47c0      	blx	r8
 80068b8:	3001      	adds	r0, #1
 80068ba:	d103      	bne.n	80068c4 <_printf_common+0xac>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7c6      	b.n	8006856 <_printf_common+0x3e>
 80068c8:	18e1      	adds	r1, r4, r3
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	2030      	movs	r0, #48	; 0x30
 80068ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068d2:	4422      	add	r2, r4
 80068d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068dc:	3302      	adds	r3, #2
 80068de:	e7c7      	b.n	8006870 <_printf_common+0x58>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4622      	mov	r2, r4
 80068e4:	4649      	mov	r1, r9
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c0      	blx	r8
 80068ea:	3001      	adds	r0, #1
 80068ec:	d0e6      	beq.n	80068bc <_printf_common+0xa4>
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7d9      	b.n	80068a6 <_printf_common+0x8e>
	...

080068f4 <_printf_i>:
 80068f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	7e0f      	ldrb	r7, [r1, #24]
 80068fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068fc:	2f78      	cmp	r7, #120	; 0x78
 80068fe:	4691      	mov	r9, r2
 8006900:	4680      	mov	r8, r0
 8006902:	460c      	mov	r4, r1
 8006904:	469a      	mov	sl, r3
 8006906:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800690a:	d807      	bhi.n	800691c <_printf_i+0x28>
 800690c:	2f62      	cmp	r7, #98	; 0x62
 800690e:	d80a      	bhi.n	8006926 <_printf_i+0x32>
 8006910:	2f00      	cmp	r7, #0
 8006912:	f000 80d4 	beq.w	8006abe <_printf_i+0x1ca>
 8006916:	2f58      	cmp	r7, #88	; 0x58
 8006918:	f000 80c0 	beq.w	8006a9c <_printf_i+0x1a8>
 800691c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006924:	e03a      	b.n	800699c <_printf_i+0xa8>
 8006926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800692a:	2b15      	cmp	r3, #21
 800692c:	d8f6      	bhi.n	800691c <_printf_i+0x28>
 800692e:	a101      	add	r1, pc, #4	; (adr r1, 8006934 <_printf_i+0x40>)
 8006930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006934:	0800698d 	.word	0x0800698d
 8006938:	080069a1 	.word	0x080069a1
 800693c:	0800691d 	.word	0x0800691d
 8006940:	0800691d 	.word	0x0800691d
 8006944:	0800691d 	.word	0x0800691d
 8006948:	0800691d 	.word	0x0800691d
 800694c:	080069a1 	.word	0x080069a1
 8006950:	0800691d 	.word	0x0800691d
 8006954:	0800691d 	.word	0x0800691d
 8006958:	0800691d 	.word	0x0800691d
 800695c:	0800691d 	.word	0x0800691d
 8006960:	08006aa5 	.word	0x08006aa5
 8006964:	080069cd 	.word	0x080069cd
 8006968:	08006a5f 	.word	0x08006a5f
 800696c:	0800691d 	.word	0x0800691d
 8006970:	0800691d 	.word	0x0800691d
 8006974:	08006ac7 	.word	0x08006ac7
 8006978:	0800691d 	.word	0x0800691d
 800697c:	080069cd 	.word	0x080069cd
 8006980:	0800691d 	.word	0x0800691d
 8006984:	0800691d 	.word	0x0800691d
 8006988:	08006a67 	.word	0x08006a67
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	602a      	str	r2, [r5, #0]
 8006994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800699c:	2301      	movs	r3, #1
 800699e:	e09f      	b.n	8006ae0 <_printf_i+0x1ec>
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	0607      	lsls	r7, r0, #24
 80069a6:	f103 0104 	add.w	r1, r3, #4
 80069aa:	6029      	str	r1, [r5, #0]
 80069ac:	d501      	bpl.n	80069b2 <_printf_i+0xbe>
 80069ae:	681e      	ldr	r6, [r3, #0]
 80069b0:	e003      	b.n	80069ba <_printf_i+0xc6>
 80069b2:	0646      	lsls	r6, r0, #25
 80069b4:	d5fb      	bpl.n	80069ae <_printf_i+0xba>
 80069b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069ba:	2e00      	cmp	r6, #0
 80069bc:	da03      	bge.n	80069c6 <_printf_i+0xd2>
 80069be:	232d      	movs	r3, #45	; 0x2d
 80069c0:	4276      	negs	r6, r6
 80069c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c6:	485a      	ldr	r0, [pc, #360]	; (8006b30 <_printf_i+0x23c>)
 80069c8:	230a      	movs	r3, #10
 80069ca:	e012      	b.n	80069f2 <_printf_i+0xfe>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	1d19      	adds	r1, r3, #4
 80069d2:	6029      	str	r1, [r5, #0]
 80069d4:	0605      	lsls	r5, r0, #24
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0xe8>
 80069d8:	681e      	ldr	r6, [r3, #0]
 80069da:	e002      	b.n	80069e2 <_printf_i+0xee>
 80069dc:	0641      	lsls	r1, r0, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0xe4>
 80069e0:	881e      	ldrh	r6, [r3, #0]
 80069e2:	4853      	ldr	r0, [pc, #332]	; (8006b30 <_printf_i+0x23c>)
 80069e4:	2f6f      	cmp	r7, #111	; 0x6f
 80069e6:	bf0c      	ite	eq
 80069e8:	2308      	moveq	r3, #8
 80069ea:	230a      	movne	r3, #10
 80069ec:	2100      	movs	r1, #0
 80069ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f2:	6865      	ldr	r5, [r4, #4]
 80069f4:	60a5      	str	r5, [r4, #8]
 80069f6:	2d00      	cmp	r5, #0
 80069f8:	bfa2      	ittt	ge
 80069fa:	6821      	ldrge	r1, [r4, #0]
 80069fc:	f021 0104 	bicge.w	r1, r1, #4
 8006a00:	6021      	strge	r1, [r4, #0]
 8006a02:	b90e      	cbnz	r6, 8006a08 <_printf_i+0x114>
 8006a04:	2d00      	cmp	r5, #0
 8006a06:	d04b      	beq.n	8006aa0 <_printf_i+0x1ac>
 8006a08:	4615      	mov	r5, r2
 8006a0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a0e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a12:	5dc7      	ldrb	r7, [r0, r7]
 8006a14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a18:	4637      	mov	r7, r6
 8006a1a:	42bb      	cmp	r3, r7
 8006a1c:	460e      	mov	r6, r1
 8006a1e:	d9f4      	bls.n	8006a0a <_printf_i+0x116>
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d10b      	bne.n	8006a3c <_printf_i+0x148>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	07de      	lsls	r6, r3, #31
 8006a28:	d508      	bpl.n	8006a3c <_printf_i+0x148>
 8006a2a:	6923      	ldr	r3, [r4, #16]
 8006a2c:	6861      	ldr	r1, [r4, #4]
 8006a2e:	4299      	cmp	r1, r3
 8006a30:	bfde      	ittt	le
 8006a32:	2330      	movle	r3, #48	; 0x30
 8006a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006a3c:	1b52      	subs	r2, r2, r5
 8006a3e:	6122      	str	r2, [r4, #16]
 8006a40:	f8cd a000 	str.w	sl, [sp]
 8006a44:	464b      	mov	r3, r9
 8006a46:	aa03      	add	r2, sp, #12
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	f7ff fee4 	bl	8006818 <_printf_common>
 8006a50:	3001      	adds	r0, #1
 8006a52:	d14a      	bne.n	8006aea <_printf_i+0x1f6>
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a58:	b004      	add	sp, #16
 8006a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	f043 0320 	orr.w	r3, r3, #32
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	4833      	ldr	r0, [pc, #204]	; (8006b34 <_printf_i+0x240>)
 8006a68:	2778      	movs	r7, #120	; 0x78
 8006a6a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	6829      	ldr	r1, [r5, #0]
 8006a72:	061f      	lsls	r7, r3, #24
 8006a74:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a78:	d402      	bmi.n	8006a80 <_printf_i+0x18c>
 8006a7a:	065f      	lsls	r7, r3, #25
 8006a7c:	bf48      	it	mi
 8006a7e:	b2b6      	uxthmi	r6, r6
 8006a80:	07df      	lsls	r7, r3, #31
 8006a82:	bf48      	it	mi
 8006a84:	f043 0320 	orrmi.w	r3, r3, #32
 8006a88:	6029      	str	r1, [r5, #0]
 8006a8a:	bf48      	it	mi
 8006a8c:	6023      	strmi	r3, [r4, #0]
 8006a8e:	b91e      	cbnz	r6, 8006a98 <_printf_i+0x1a4>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	f023 0320 	bic.w	r3, r3, #32
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	2310      	movs	r3, #16
 8006a9a:	e7a7      	b.n	80069ec <_printf_i+0xf8>
 8006a9c:	4824      	ldr	r0, [pc, #144]	; (8006b30 <_printf_i+0x23c>)
 8006a9e:	e7e4      	b.n	8006a6a <_printf_i+0x176>
 8006aa0:	4615      	mov	r5, r2
 8006aa2:	e7bd      	b.n	8006a20 <_printf_i+0x12c>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	6826      	ldr	r6, [r4, #0]
 8006aa8:	6961      	ldr	r1, [r4, #20]
 8006aaa:	1d18      	adds	r0, r3, #4
 8006aac:	6028      	str	r0, [r5, #0]
 8006aae:	0635      	lsls	r5, r6, #24
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	d501      	bpl.n	8006ab8 <_printf_i+0x1c4>
 8006ab4:	6019      	str	r1, [r3, #0]
 8006ab6:	e002      	b.n	8006abe <_printf_i+0x1ca>
 8006ab8:	0670      	lsls	r0, r6, #25
 8006aba:	d5fb      	bpl.n	8006ab4 <_printf_i+0x1c0>
 8006abc:	8019      	strh	r1, [r3, #0]
 8006abe:	2300      	movs	r3, #0
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	4615      	mov	r5, r2
 8006ac4:	e7bc      	b.n	8006a40 <_printf_i+0x14c>
 8006ac6:	682b      	ldr	r3, [r5, #0]
 8006ac8:	1d1a      	adds	r2, r3, #4
 8006aca:	602a      	str	r2, [r5, #0]
 8006acc:	681d      	ldr	r5, [r3, #0]
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f7f9 fb84 	bl	80001e0 <memchr>
 8006ad8:	b108      	cbz	r0, 8006ade <_printf_i+0x1ea>
 8006ada:	1b40      	subs	r0, r0, r5
 8006adc:	6060      	str	r0, [r4, #4]
 8006ade:	6863      	ldr	r3, [r4, #4]
 8006ae0:	6123      	str	r3, [r4, #16]
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae8:	e7aa      	b.n	8006a40 <_printf_i+0x14c>
 8006aea:	6923      	ldr	r3, [r4, #16]
 8006aec:	462a      	mov	r2, r5
 8006aee:	4649      	mov	r1, r9
 8006af0:	4640      	mov	r0, r8
 8006af2:	47d0      	blx	sl
 8006af4:	3001      	adds	r0, #1
 8006af6:	d0ad      	beq.n	8006a54 <_printf_i+0x160>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	079b      	lsls	r3, r3, #30
 8006afc:	d413      	bmi.n	8006b26 <_printf_i+0x232>
 8006afe:	68e0      	ldr	r0, [r4, #12]
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	4298      	cmp	r0, r3
 8006b04:	bfb8      	it	lt
 8006b06:	4618      	movlt	r0, r3
 8006b08:	e7a6      	b.n	8006a58 <_printf_i+0x164>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4632      	mov	r2, r6
 8006b0e:	4649      	mov	r1, r9
 8006b10:	4640      	mov	r0, r8
 8006b12:	47d0      	blx	sl
 8006b14:	3001      	adds	r0, #1
 8006b16:	d09d      	beq.n	8006a54 <_printf_i+0x160>
 8006b18:	3501      	adds	r5, #1
 8006b1a:	68e3      	ldr	r3, [r4, #12]
 8006b1c:	9903      	ldr	r1, [sp, #12]
 8006b1e:	1a5b      	subs	r3, r3, r1
 8006b20:	42ab      	cmp	r3, r5
 8006b22:	dcf2      	bgt.n	8006b0a <_printf_i+0x216>
 8006b24:	e7eb      	b.n	8006afe <_printf_i+0x20a>
 8006b26:	2500      	movs	r5, #0
 8006b28:	f104 0619 	add.w	r6, r4, #25
 8006b2c:	e7f5      	b.n	8006b1a <_printf_i+0x226>
 8006b2e:	bf00      	nop
 8006b30:	08006d9d 	.word	0x08006d9d
 8006b34:	08006dae 	.word	0x08006dae

08006b38 <__malloc_lock>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__malloc_lock+0x8>)
 8006b3a:	f7ff bc73 	b.w	8006424 <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	2000056c 	.word	0x2000056c

08006b44 <__malloc_unlock>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__malloc_unlock+0x8>)
 8006b46:	f7ff bc6e 	b.w	8006426 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	2000056c 	.word	0x2000056c

08006b50 <_realloc_r>:
 8006b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b54:	4680      	mov	r8, r0
 8006b56:	4614      	mov	r4, r2
 8006b58:	460e      	mov	r6, r1
 8006b5a:	b921      	cbnz	r1, 8006b66 <_realloc_r+0x16>
 8006b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b60:	4611      	mov	r1, r2
 8006b62:	f7ff bdd9 	b.w	8006718 <_malloc_r>
 8006b66:	b92a      	cbnz	r2, 8006b74 <_realloc_r+0x24>
 8006b68:	f000 f85a 	bl	8006c20 <_free_r>
 8006b6c:	4625      	mov	r5, r4
 8006b6e:	4628      	mov	r0, r5
 8006b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b74:	f000 f8a0 	bl	8006cb8 <_malloc_usable_size_r>
 8006b78:	4284      	cmp	r4, r0
 8006b7a:	4607      	mov	r7, r0
 8006b7c:	d802      	bhi.n	8006b84 <_realloc_r+0x34>
 8006b7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b82:	d812      	bhi.n	8006baa <_realloc_r+0x5a>
 8006b84:	4621      	mov	r1, r4
 8006b86:	4640      	mov	r0, r8
 8006b88:	f7ff fdc6 	bl	8006718 <_malloc_r>
 8006b8c:	4605      	mov	r5, r0
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0ed      	beq.n	8006b6e <_realloc_r+0x1e>
 8006b92:	42bc      	cmp	r4, r7
 8006b94:	4622      	mov	r2, r4
 8006b96:	4631      	mov	r1, r6
 8006b98:	bf28      	it	cs
 8006b9a:	463a      	movcs	r2, r7
 8006b9c:	f000 f832 	bl	8006c04 <memcpy>
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4640      	mov	r0, r8
 8006ba4:	f000 f83c 	bl	8006c20 <_free_r>
 8006ba8:	e7e1      	b.n	8006b6e <_realloc_r+0x1e>
 8006baa:	4635      	mov	r5, r6
 8006bac:	e7df      	b.n	8006b6e <_realloc_r+0x1e>

08006bae <memmove>:
 8006bae:	4288      	cmp	r0, r1
 8006bb0:	b510      	push	{r4, lr}
 8006bb2:	eb01 0402 	add.w	r4, r1, r2
 8006bb6:	d902      	bls.n	8006bbe <memmove+0x10>
 8006bb8:	4284      	cmp	r4, r0
 8006bba:	4623      	mov	r3, r4
 8006bbc:	d807      	bhi.n	8006bce <memmove+0x20>
 8006bbe:	1e43      	subs	r3, r0, #1
 8006bc0:	42a1      	cmp	r1, r4
 8006bc2:	d008      	beq.n	8006bd6 <memmove+0x28>
 8006bc4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bc8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bcc:	e7f8      	b.n	8006bc0 <memmove+0x12>
 8006bce:	4402      	add	r2, r0
 8006bd0:	4601      	mov	r1, r0
 8006bd2:	428a      	cmp	r2, r1
 8006bd4:	d100      	bne.n	8006bd8 <memmove+0x2a>
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bdc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006be0:	e7f7      	b.n	8006bd2 <memmove+0x24>
	...

08006be4 <_sbrk_r>:
 8006be4:	b538      	push	{r3, r4, r5, lr}
 8006be6:	4d06      	ldr	r5, [pc, #24]	; (8006c00 <_sbrk_r+0x1c>)
 8006be8:	2300      	movs	r3, #0
 8006bea:	4604      	mov	r4, r0
 8006bec:	4608      	mov	r0, r1
 8006bee:	602b      	str	r3, [r5, #0]
 8006bf0:	f7fa f9cc 	bl	8000f8c <_sbrk>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_sbrk_r+0x1a>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_sbrk_r+0x1a>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20000578 	.word	0x20000578

08006c04 <memcpy>:
 8006c04:	440a      	add	r2, r1
 8006c06:	4291      	cmp	r1, r2
 8006c08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006c0c:	d100      	bne.n	8006c10 <memcpy+0xc>
 8006c0e:	4770      	bx	lr
 8006c10:	b510      	push	{r4, lr}
 8006c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	d1f9      	bne.n	8006c12 <memcpy+0xe>
 8006c1e:	bd10      	pop	{r4, pc}

08006c20 <_free_r>:
 8006c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c22:	2900      	cmp	r1, #0
 8006c24:	d044      	beq.n	8006cb0 <_free_r+0x90>
 8006c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c2a:	9001      	str	r0, [sp, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c32:	bfb8      	it	lt
 8006c34:	18e4      	addlt	r4, r4, r3
 8006c36:	f7ff ff7f 	bl	8006b38 <__malloc_lock>
 8006c3a:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <_free_r+0x94>)
 8006c3c:	9801      	ldr	r0, [sp, #4]
 8006c3e:	6813      	ldr	r3, [r2, #0]
 8006c40:	b933      	cbnz	r3, 8006c50 <_free_r+0x30>
 8006c42:	6063      	str	r3, [r4, #4]
 8006c44:	6014      	str	r4, [r2, #0]
 8006c46:	b003      	add	sp, #12
 8006c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c4c:	f7ff bf7a 	b.w	8006b44 <__malloc_unlock>
 8006c50:	42a3      	cmp	r3, r4
 8006c52:	d908      	bls.n	8006c66 <_free_r+0x46>
 8006c54:	6825      	ldr	r5, [r4, #0]
 8006c56:	1961      	adds	r1, r4, r5
 8006c58:	428b      	cmp	r3, r1
 8006c5a:	bf01      	itttt	eq
 8006c5c:	6819      	ldreq	r1, [r3, #0]
 8006c5e:	685b      	ldreq	r3, [r3, #4]
 8006c60:	1949      	addeq	r1, r1, r5
 8006c62:	6021      	streq	r1, [r4, #0]
 8006c64:	e7ed      	b.n	8006c42 <_free_r+0x22>
 8006c66:	461a      	mov	r2, r3
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	b10b      	cbz	r3, 8006c70 <_free_r+0x50>
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	d9fa      	bls.n	8006c66 <_free_r+0x46>
 8006c70:	6811      	ldr	r1, [r2, #0]
 8006c72:	1855      	adds	r5, r2, r1
 8006c74:	42a5      	cmp	r5, r4
 8006c76:	d10b      	bne.n	8006c90 <_free_r+0x70>
 8006c78:	6824      	ldr	r4, [r4, #0]
 8006c7a:	4421      	add	r1, r4
 8006c7c:	1854      	adds	r4, r2, r1
 8006c7e:	42a3      	cmp	r3, r4
 8006c80:	6011      	str	r1, [r2, #0]
 8006c82:	d1e0      	bne.n	8006c46 <_free_r+0x26>
 8006c84:	681c      	ldr	r4, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	6053      	str	r3, [r2, #4]
 8006c8a:	440c      	add	r4, r1
 8006c8c:	6014      	str	r4, [r2, #0]
 8006c8e:	e7da      	b.n	8006c46 <_free_r+0x26>
 8006c90:	d902      	bls.n	8006c98 <_free_r+0x78>
 8006c92:	230c      	movs	r3, #12
 8006c94:	6003      	str	r3, [r0, #0]
 8006c96:	e7d6      	b.n	8006c46 <_free_r+0x26>
 8006c98:	6825      	ldr	r5, [r4, #0]
 8006c9a:	1961      	adds	r1, r4, r5
 8006c9c:	428b      	cmp	r3, r1
 8006c9e:	bf04      	itt	eq
 8006ca0:	6819      	ldreq	r1, [r3, #0]
 8006ca2:	685b      	ldreq	r3, [r3, #4]
 8006ca4:	6063      	str	r3, [r4, #4]
 8006ca6:	bf04      	itt	eq
 8006ca8:	1949      	addeq	r1, r1, r5
 8006caa:	6021      	streq	r1, [r4, #0]
 8006cac:	6054      	str	r4, [r2, #4]
 8006cae:	e7ca      	b.n	8006c46 <_free_r+0x26>
 8006cb0:	b003      	add	sp, #12
 8006cb2:	bd30      	pop	{r4, r5, pc}
 8006cb4:	20000570 	.word	0x20000570

08006cb8 <_malloc_usable_size_r>:
 8006cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cbc:	1f18      	subs	r0, r3, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfbc      	itt	lt
 8006cc2:	580b      	ldrlt	r3, [r1, r0]
 8006cc4:	18c0      	addlt	r0, r0, r3
 8006cc6:	4770      	bx	lr

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
